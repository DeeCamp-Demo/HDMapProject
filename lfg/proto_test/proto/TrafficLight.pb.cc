// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TrafficLight.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TrafficLight.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hdmap {
class LightDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Light>
     _instance;
} _Light_default_instance_;
class TrafficLightDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TrafficLight>
     _instance;
} _TrafficLight_default_instance_;
class TrafficLightPerFrameDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TrafficLightPerFrame>
     _instance;
} _TrafficLightPerFrame_default_instance_;
class TrafficLightPerCaptureDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TrafficLightPerCapture>
     _instance;
} _TrafficLightPerCapture_default_instance_;

namespace protobuf_TrafficLight_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, geometry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, direction_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, geometry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, motor_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, lights_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightPerFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightPerFrame, frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightPerFrame, traffic_lights_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightPerCapture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightPerCapture, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightPerCapture, traffic_light_frames_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Light)},
  { 8, -1, sizeof(TrafficLight)},
  { 17, -1, sizeof(TrafficLightPerFrame)},
  { 24, -1, sizeof(TrafficLightPerCapture)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Light_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrafficLight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrafficLightPerFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrafficLightPerCapture_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "TrafficLight.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Light_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Light_default_instance_);_TrafficLight_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TrafficLight_default_instance_);_TrafficLightPerFrame_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TrafficLightPerFrame_default_instance_);_TrafficLightPerCapture_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TrafficLightPerCapture_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022TrafficLight.proto\022\005hdmap\"8\n\005Light\022\n\n\002"
      "id\030\001 \001(\005\022\020\n\010geometry\030\002 \001(\t\022\021\n\tdirection\030"
      "\003 \001(\005\"^\n\014TrafficLight\022\n\n\002id\030\001 \001(\005\022\020\n\010geo"
      "metry\030\002 \001(\t\022\022\n\nmotor_type\030\003 \001(\005\022\034\n\006light"
      "s\030\004 \003(\0132\014.hdmap.Light\"U\n\024TrafficLightPer"
      "Frame\022\020\n\010frame_id\030\001 \001(\005\022+\n\016traffic_light"
      "s\030\002 \003(\0132\023.hdmap.TrafficLight\"e\n\026TrafficL"
      "ightPerCapture\022\020\n\010scene_id\030\001 \001(\t\0229\n\024traf"
      "fic_light_frames\030\002 \003(\0132\033.hdmap.TrafficLi"
      "ghtPerFrameb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 379);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TrafficLight.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_TrafficLight_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Light::kIdFieldNumber;
const int Light::kGeometryFieldNumber;
const int Light::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Light::Light()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TrafficLight_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap.Light)
}
Light::Light(const Light& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  geometry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.geometry().size() > 0) {
    geometry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geometry_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&id_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:hdmap.Light)
}

void Light::SharedCtor() {
  geometry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&id_)) + sizeof(direction_));
  _cached_size_ = 0;
}

Light::~Light() {
  // @@protoc_insertion_point(destructor:hdmap.Light)
  SharedDtor();
}

void Light::SharedDtor() {
  geometry_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Light::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Light::descriptor() {
  protobuf_TrafficLight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TrafficLight_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Light& Light::default_instance() {
  protobuf_TrafficLight_2eproto::InitDefaults();
  return *internal_default_instance();
}

Light* Light::New(::google::protobuf::Arena* arena) const {
  Light* n = new Light;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Light::Clear() {
// @@protoc_insertion_point(message_clear_start:hdmap.Light)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geometry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&id_)) + sizeof(direction_));
  _internal_metadata_.Clear();
}

bool Light::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap.Light)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string geometry = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geometry()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->geometry().data(), static_cast<int>(this->geometry().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hdmap.Light.geometry"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 direction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap.Light)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap.Light)
  return false;
#undef DO_
}

void Light::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap.Light)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string geometry = 2;
  if (this->geometry().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->geometry().data(), static_cast<int>(this->geometry().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hdmap.Light.geometry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->geometry(), output);
  }

  // int32 direction = 3;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->direction(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap.Light)
}

::google::protobuf::uint8* Light::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hdmap.Light)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string geometry = 2;
  if (this->geometry().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->geometry().data(), static_cast<int>(this->geometry().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hdmap.Light.geometry");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->geometry(), target);
  }

  // int32 direction = 3;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->direction(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap.Light)
  return target;
}

size_t Light::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hdmap.Light)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string geometry = 2;
  if (this->geometry().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->geometry());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 direction = 3;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->direction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Light::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hdmap.Light)
  GOOGLE_DCHECK_NE(&from, this);
  const Light* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Light>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hdmap.Light)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hdmap.Light)
    MergeFrom(*source);
  }
}

void Light::MergeFrom(const Light& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hdmap.Light)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.geometry().size() > 0) {

    geometry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geometry_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
}

void Light::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hdmap.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Light::CopyFrom(const Light& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hdmap.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Light::IsInitialized() const {
  return true;
}

void Light::Swap(Light* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Light::InternalSwap(Light* other) {
  using std::swap;
  geometry_.Swap(&other->geometry_);
  swap(id_, other->id_);
  swap(direction_, other->direction_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Light::GetMetadata() const {
  protobuf_TrafficLight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TrafficLight_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Light

// int32 id = 1;
void Light::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 Light::id() const {
  // @@protoc_insertion_point(field_get:hdmap.Light.id)
  return id_;
}
void Light::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:hdmap.Light.id)
}

// string geometry = 2;
void Light::clear_geometry() {
  geometry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Light::geometry() const {
  // @@protoc_insertion_point(field_get:hdmap.Light.geometry)
  return geometry_.GetNoArena();
}
void Light::set_geometry(const ::std::string& value) {
  
  geometry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hdmap.Light.geometry)
}
#if LANG_CXX11
void Light::set_geometry(::std::string&& value) {
  
  geometry_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hdmap.Light.geometry)
}
#endif
void Light::set_geometry(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  geometry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hdmap.Light.geometry)
}
void Light::set_geometry(const char* value, size_t size) {
  
  geometry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hdmap.Light.geometry)
}
::std::string* Light::mutable_geometry() {
  
  // @@protoc_insertion_point(field_mutable:hdmap.Light.geometry)
  return geometry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Light::release_geometry() {
  // @@protoc_insertion_point(field_release:hdmap.Light.geometry)
  
  return geometry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Light::set_allocated_geometry(::std::string* geometry) {
  if (geometry != NULL) {
    
  } else {
    
  }
  geometry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geometry);
  // @@protoc_insertion_point(field_set_allocated:hdmap.Light.geometry)
}

// int32 direction = 3;
void Light::clear_direction() {
  direction_ = 0;
}
::google::protobuf::int32 Light::direction() const {
  // @@protoc_insertion_point(field_get:hdmap.Light.direction)
  return direction_;
}
void Light::set_direction(::google::protobuf::int32 value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:hdmap.Light.direction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLight::kIdFieldNumber;
const int TrafficLight::kGeometryFieldNumber;
const int TrafficLight::kMotorTypeFieldNumber;
const int TrafficLight::kLightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLight::TrafficLight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TrafficLight_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap.TrafficLight)
}
TrafficLight::TrafficLight(const TrafficLight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lights_(from.lights_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  geometry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.geometry().size() > 0) {
    geometry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geometry_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&motor_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(motor_type_));
  // @@protoc_insertion_point(copy_constructor:hdmap.TrafficLight)
}

void TrafficLight::SharedCtor() {
  geometry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&motor_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(motor_type_));
  _cached_size_ = 0;
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:hdmap.TrafficLight)
  SharedDtor();
}

void TrafficLight::SharedDtor() {
  geometry_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrafficLight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLight::descriptor() {
  protobuf_TrafficLight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TrafficLight_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLight& TrafficLight::default_instance() {
  protobuf_TrafficLight_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrafficLight* TrafficLight::New(::google::protobuf::Arena* arena) const {
  TrafficLight* n = new TrafficLight;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:hdmap.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lights_.Clear();
  geometry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&motor_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(motor_type_));
  _internal_metadata_.Clear();
}

bool TrafficLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap.TrafficLight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string geometry = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geometry()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->geometry().data(), static_cast<int>(this->geometry().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hdmap.TrafficLight.geometry"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 motor_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &motor_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hdmap.Light lights = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap.TrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap.TrafficLight)
  return false;
#undef DO_
}

void TrafficLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string geometry = 2;
  if (this->geometry().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->geometry().data(), static_cast<int>(this->geometry().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hdmap.TrafficLight.geometry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->geometry(), output);
  }

  // int32 motor_type = 3;
  if (this->motor_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->motor_type(), output);
  }

  // repeated .hdmap.Light lights = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lights_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lights(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap.TrafficLight)
}

::google::protobuf::uint8* TrafficLight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hdmap.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string geometry = 2;
  if (this->geometry().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->geometry().data(), static_cast<int>(this->geometry().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hdmap.TrafficLight.geometry");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->geometry(), target);
  }

  // int32 motor_type = 3;
  if (this->motor_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->motor_type(), target);
  }

  // repeated .hdmap.Light lights = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lights_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->lights(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap.TrafficLight)
  return target;
}

size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hdmap.TrafficLight)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .hdmap.Light lights = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->lights_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lights(static_cast<int>(i)));
    }
  }

  // string geometry = 2;
  if (this->geometry().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->geometry());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 motor_type = 3;
  if (this->motor_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->motor_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hdmap.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hdmap.TrafficLight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hdmap.TrafficLight)
    MergeFrom(*source);
  }
}

void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hdmap.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lights_.MergeFrom(from.lights_);
  if (from.geometry().size() > 0) {

    geometry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geometry_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.motor_type() != 0) {
    set_motor_type(from.motor_type());
  }
}

void TrafficLight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hdmap.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hdmap.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  return true;
}

void TrafficLight::Swap(TrafficLight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLight::InternalSwap(TrafficLight* other) {
  using std::swap;
  lights_.InternalSwap(&other->lights_);
  geometry_.Swap(&other->geometry_);
  swap(id_, other->id_);
  swap(motor_type_, other->motor_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLight::GetMetadata() const {
  protobuf_TrafficLight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TrafficLight_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLight

// int32 id = 1;
void TrafficLight::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 TrafficLight::id() const {
  // @@protoc_insertion_point(field_get:hdmap.TrafficLight.id)
  return id_;
}
void TrafficLight::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:hdmap.TrafficLight.id)
}

// string geometry = 2;
void TrafficLight::clear_geometry() {
  geometry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TrafficLight::geometry() const {
  // @@protoc_insertion_point(field_get:hdmap.TrafficLight.geometry)
  return geometry_.GetNoArena();
}
void TrafficLight::set_geometry(const ::std::string& value) {
  
  geometry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hdmap.TrafficLight.geometry)
}
#if LANG_CXX11
void TrafficLight::set_geometry(::std::string&& value) {
  
  geometry_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hdmap.TrafficLight.geometry)
}
#endif
void TrafficLight::set_geometry(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  geometry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hdmap.TrafficLight.geometry)
}
void TrafficLight::set_geometry(const char* value, size_t size) {
  
  geometry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hdmap.TrafficLight.geometry)
}
::std::string* TrafficLight::mutable_geometry() {
  
  // @@protoc_insertion_point(field_mutable:hdmap.TrafficLight.geometry)
  return geometry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrafficLight::release_geometry() {
  // @@protoc_insertion_point(field_release:hdmap.TrafficLight.geometry)
  
  return geometry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrafficLight::set_allocated_geometry(::std::string* geometry) {
  if (geometry != NULL) {
    
  } else {
    
  }
  geometry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geometry);
  // @@protoc_insertion_point(field_set_allocated:hdmap.TrafficLight.geometry)
}

// int32 motor_type = 3;
void TrafficLight::clear_motor_type() {
  motor_type_ = 0;
}
::google::protobuf::int32 TrafficLight::motor_type() const {
  // @@protoc_insertion_point(field_get:hdmap.TrafficLight.motor_type)
  return motor_type_;
}
void TrafficLight::set_motor_type(::google::protobuf::int32 value) {
  
  motor_type_ = value;
  // @@protoc_insertion_point(field_set:hdmap.TrafficLight.motor_type)
}

// repeated .hdmap.Light lights = 4;
int TrafficLight::lights_size() const {
  return lights_.size();
}
void TrafficLight::clear_lights() {
  lights_.Clear();
}
const ::hdmap::Light& TrafficLight::lights(int index) const {
  // @@protoc_insertion_point(field_get:hdmap.TrafficLight.lights)
  return lights_.Get(index);
}
::hdmap::Light* TrafficLight::mutable_lights(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap.TrafficLight.lights)
  return lights_.Mutable(index);
}
::hdmap::Light* TrafficLight::add_lights() {
  // @@protoc_insertion_point(field_add:hdmap.TrafficLight.lights)
  return lights_.Add();
}
::google::protobuf::RepeatedPtrField< ::hdmap::Light >*
TrafficLight::mutable_lights() {
  // @@protoc_insertion_point(field_mutable_list:hdmap.TrafficLight.lights)
  return &lights_;
}
const ::google::protobuf::RepeatedPtrField< ::hdmap::Light >&
TrafficLight::lights() const {
  // @@protoc_insertion_point(field_list:hdmap.TrafficLight.lights)
  return lights_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightPerFrame::kFrameIdFieldNumber;
const int TrafficLightPerFrame::kTrafficLightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightPerFrame::TrafficLightPerFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TrafficLight_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap.TrafficLightPerFrame)
}
TrafficLightPerFrame::TrafficLightPerFrame(const TrafficLightPerFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      traffic_lights_(from.traffic_lights_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_id_ = from.frame_id_;
  // @@protoc_insertion_point(copy_constructor:hdmap.TrafficLightPerFrame)
}

void TrafficLightPerFrame::SharedCtor() {
  frame_id_ = 0;
  _cached_size_ = 0;
}

TrafficLightPerFrame::~TrafficLightPerFrame() {
  // @@protoc_insertion_point(destructor:hdmap.TrafficLightPerFrame)
  SharedDtor();
}

void TrafficLightPerFrame::SharedDtor() {
}

void TrafficLightPerFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLightPerFrame::descriptor() {
  protobuf_TrafficLight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TrafficLight_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLightPerFrame& TrafficLightPerFrame::default_instance() {
  protobuf_TrafficLight_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrafficLightPerFrame* TrafficLightPerFrame::New(::google::protobuf::Arena* arena) const {
  TrafficLightPerFrame* n = new TrafficLightPerFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLightPerFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:hdmap.TrafficLightPerFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traffic_lights_.Clear();
  frame_id_ = 0;
  _internal_metadata_.Clear();
}

bool TrafficLightPerFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap.TrafficLightPerFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 frame_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hdmap.TrafficLight traffic_lights = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traffic_lights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap.TrafficLightPerFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap.TrafficLightPerFrame)
  return false;
#undef DO_
}

void TrafficLightPerFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap.TrafficLightPerFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frame_id(), output);
  }

  // repeated .hdmap.TrafficLight traffic_lights = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_lights_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->traffic_lights(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap.TrafficLightPerFrame)
}

::google::protobuf::uint8* TrafficLightPerFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hdmap.TrafficLightPerFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->frame_id(), target);
  }

  // repeated .hdmap.TrafficLight traffic_lights = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_lights_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->traffic_lights(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap.TrafficLightPerFrame)
  return target;
}

size_t TrafficLightPerFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hdmap.TrafficLightPerFrame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .hdmap.TrafficLight traffic_lights = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_lights_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traffic_lights(static_cast<int>(i)));
    }
  }

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLightPerFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hdmap.TrafficLightPerFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightPerFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightPerFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hdmap.TrafficLightPerFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hdmap.TrafficLightPerFrame)
    MergeFrom(*source);
  }
}

void TrafficLightPerFrame::MergeFrom(const TrafficLightPerFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hdmap.TrafficLightPerFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traffic_lights_.MergeFrom(from.traffic_lights_);
  if (from.frame_id() != 0) {
    set_frame_id(from.frame_id());
  }
}

void TrafficLightPerFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hdmap.TrafficLightPerFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightPerFrame::CopyFrom(const TrafficLightPerFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hdmap.TrafficLightPerFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightPerFrame::IsInitialized() const {
  return true;
}

void TrafficLightPerFrame::Swap(TrafficLightPerFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightPerFrame::InternalSwap(TrafficLightPerFrame* other) {
  using std::swap;
  traffic_lights_.InternalSwap(&other->traffic_lights_);
  swap(frame_id_, other->frame_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLightPerFrame::GetMetadata() const {
  protobuf_TrafficLight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TrafficLight_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLightPerFrame

// int32 frame_id = 1;
void TrafficLightPerFrame::clear_frame_id() {
  frame_id_ = 0;
}
::google::protobuf::int32 TrafficLightPerFrame::frame_id() const {
  // @@protoc_insertion_point(field_get:hdmap.TrafficLightPerFrame.frame_id)
  return frame_id_;
}
void TrafficLightPerFrame::set_frame_id(::google::protobuf::int32 value) {
  
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:hdmap.TrafficLightPerFrame.frame_id)
}

// repeated .hdmap.TrafficLight traffic_lights = 2;
int TrafficLightPerFrame::traffic_lights_size() const {
  return traffic_lights_.size();
}
void TrafficLightPerFrame::clear_traffic_lights() {
  traffic_lights_.Clear();
}
const ::hdmap::TrafficLight& TrafficLightPerFrame::traffic_lights(int index) const {
  // @@protoc_insertion_point(field_get:hdmap.TrafficLightPerFrame.traffic_lights)
  return traffic_lights_.Get(index);
}
::hdmap::TrafficLight* TrafficLightPerFrame::mutable_traffic_lights(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap.TrafficLightPerFrame.traffic_lights)
  return traffic_lights_.Mutable(index);
}
::hdmap::TrafficLight* TrafficLightPerFrame::add_traffic_lights() {
  // @@protoc_insertion_point(field_add:hdmap.TrafficLightPerFrame.traffic_lights)
  return traffic_lights_.Add();
}
::google::protobuf::RepeatedPtrField< ::hdmap::TrafficLight >*
TrafficLightPerFrame::mutable_traffic_lights() {
  // @@protoc_insertion_point(field_mutable_list:hdmap.TrafficLightPerFrame.traffic_lights)
  return &traffic_lights_;
}
const ::google::protobuf::RepeatedPtrField< ::hdmap::TrafficLight >&
TrafficLightPerFrame::traffic_lights() const {
  // @@protoc_insertion_point(field_list:hdmap.TrafficLightPerFrame.traffic_lights)
  return traffic_lights_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightPerCapture::kSceneIdFieldNumber;
const int TrafficLightPerCapture::kTrafficLightFramesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightPerCapture::TrafficLightPerCapture()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TrafficLight_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap.TrafficLightPerCapture)
}
TrafficLightPerCapture::TrafficLightPerCapture(const TrafficLightPerCapture& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      traffic_light_frames_(from.traffic_light_frames_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scene_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.scene_id().size() > 0) {
    scene_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scene_id_);
  }
  // @@protoc_insertion_point(copy_constructor:hdmap.TrafficLightPerCapture)
}

void TrafficLightPerCapture::SharedCtor() {
  scene_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TrafficLightPerCapture::~TrafficLightPerCapture() {
  // @@protoc_insertion_point(destructor:hdmap.TrafficLightPerCapture)
  SharedDtor();
}

void TrafficLightPerCapture::SharedDtor() {
  scene_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrafficLightPerCapture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLightPerCapture::descriptor() {
  protobuf_TrafficLight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TrafficLight_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLightPerCapture& TrafficLightPerCapture::default_instance() {
  protobuf_TrafficLight_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrafficLightPerCapture* TrafficLightPerCapture::New(::google::protobuf::Arena* arena) const {
  TrafficLightPerCapture* n = new TrafficLightPerCapture;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLightPerCapture::Clear() {
// @@protoc_insertion_point(message_clear_start:hdmap.TrafficLightPerCapture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traffic_light_frames_.Clear();
  scene_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool TrafficLightPerCapture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap.TrafficLightPerCapture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string scene_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scene_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scene_id().data(), static_cast<int>(this->scene_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hdmap.TrafficLightPerCapture.scene_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hdmap.TrafficLightPerFrame traffic_light_frames = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traffic_light_frames()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap.TrafficLightPerCapture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap.TrafficLightPerCapture)
  return false;
#undef DO_
}

void TrafficLightPerCapture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap.TrafficLightPerCapture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string scene_id = 1;
  if (this->scene_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scene_id().data(), static_cast<int>(this->scene_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hdmap.TrafficLightPerCapture.scene_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->scene_id(), output);
  }

  // repeated .hdmap.TrafficLightPerFrame traffic_light_frames = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_light_frames_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->traffic_light_frames(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap.TrafficLightPerCapture)
}

::google::protobuf::uint8* TrafficLightPerCapture::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hdmap.TrafficLightPerCapture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string scene_id = 1;
  if (this->scene_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scene_id().data(), static_cast<int>(this->scene_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hdmap.TrafficLightPerCapture.scene_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->scene_id(), target);
  }

  // repeated .hdmap.TrafficLightPerFrame traffic_light_frames = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_light_frames_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->traffic_light_frames(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap.TrafficLightPerCapture)
  return target;
}

size_t TrafficLightPerCapture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hdmap.TrafficLightPerCapture)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .hdmap.TrafficLightPerFrame traffic_light_frames = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_light_frames_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traffic_light_frames(static_cast<int>(i)));
    }
  }

  // string scene_id = 1;
  if (this->scene_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scene_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLightPerCapture::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hdmap.TrafficLightPerCapture)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightPerCapture* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightPerCapture>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hdmap.TrafficLightPerCapture)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hdmap.TrafficLightPerCapture)
    MergeFrom(*source);
  }
}

void TrafficLightPerCapture::MergeFrom(const TrafficLightPerCapture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hdmap.TrafficLightPerCapture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traffic_light_frames_.MergeFrom(from.traffic_light_frames_);
  if (from.scene_id().size() > 0) {

    scene_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scene_id_);
  }
}

void TrafficLightPerCapture::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hdmap.TrafficLightPerCapture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightPerCapture::CopyFrom(const TrafficLightPerCapture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hdmap.TrafficLightPerCapture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightPerCapture::IsInitialized() const {
  return true;
}

void TrafficLightPerCapture::Swap(TrafficLightPerCapture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightPerCapture::InternalSwap(TrafficLightPerCapture* other) {
  using std::swap;
  traffic_light_frames_.InternalSwap(&other->traffic_light_frames_);
  scene_id_.Swap(&other->scene_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLightPerCapture::GetMetadata() const {
  protobuf_TrafficLight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TrafficLight_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLightPerCapture

// string scene_id = 1;
void TrafficLightPerCapture::clear_scene_id() {
  scene_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TrafficLightPerCapture::scene_id() const {
  // @@protoc_insertion_point(field_get:hdmap.TrafficLightPerCapture.scene_id)
  return scene_id_.GetNoArena();
}
void TrafficLightPerCapture::set_scene_id(const ::std::string& value) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hdmap.TrafficLightPerCapture.scene_id)
}
#if LANG_CXX11
void TrafficLightPerCapture::set_scene_id(::std::string&& value) {
  
  scene_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hdmap.TrafficLightPerCapture.scene_id)
}
#endif
void TrafficLightPerCapture::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hdmap.TrafficLightPerCapture.scene_id)
}
void TrafficLightPerCapture::set_scene_id(const char* value, size_t size) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hdmap.TrafficLightPerCapture.scene_id)
}
::std::string* TrafficLightPerCapture::mutable_scene_id() {
  
  // @@protoc_insertion_point(field_mutable:hdmap.TrafficLightPerCapture.scene_id)
  return scene_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrafficLightPerCapture::release_scene_id() {
  // @@protoc_insertion_point(field_release:hdmap.TrafficLightPerCapture.scene_id)
  
  return scene_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrafficLightPerCapture::set_allocated_scene_id(::std::string* scene_id) {
  if (scene_id != NULL) {
    
  } else {
    
  }
  scene_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene_id);
  // @@protoc_insertion_point(field_set_allocated:hdmap.TrafficLightPerCapture.scene_id)
}

// repeated .hdmap.TrafficLightPerFrame traffic_light_frames = 2;
int TrafficLightPerCapture::traffic_light_frames_size() const {
  return traffic_light_frames_.size();
}
void TrafficLightPerCapture::clear_traffic_light_frames() {
  traffic_light_frames_.Clear();
}
const ::hdmap::TrafficLightPerFrame& TrafficLightPerCapture::traffic_light_frames(int index) const {
  // @@protoc_insertion_point(field_get:hdmap.TrafficLightPerCapture.traffic_light_frames)
  return traffic_light_frames_.Get(index);
}
::hdmap::TrafficLightPerFrame* TrafficLightPerCapture::mutable_traffic_light_frames(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap.TrafficLightPerCapture.traffic_light_frames)
  return traffic_light_frames_.Mutable(index);
}
::hdmap::TrafficLightPerFrame* TrafficLightPerCapture::add_traffic_light_frames() {
  // @@protoc_insertion_point(field_add:hdmap.TrafficLightPerCapture.traffic_light_frames)
  return traffic_light_frames_.Add();
}
::google::protobuf::RepeatedPtrField< ::hdmap::TrafficLightPerFrame >*
TrafficLightPerCapture::mutable_traffic_light_frames() {
  // @@protoc_insertion_point(field_mutable_list:hdmap.TrafficLightPerCapture.traffic_light_frames)
  return &traffic_light_frames_;
}
const ::google::protobuf::RepeatedPtrField< ::hdmap::TrafficLightPerFrame >&
TrafficLightPerCapture::traffic_light_frames() const {
  // @@protoc_insertion_point(field_list:hdmap.TrafficLightPerCapture.traffic_light_frames)
  return traffic_light_frames_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap

// @@protoc_insertion_point(global_scope)
