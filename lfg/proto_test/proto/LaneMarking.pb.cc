// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LaneMarking.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LaneMarking.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hdmap {
class LaneMarkingDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LaneMarking>
     _instance;
} _LaneMarking_default_instance_;
class LaneMarkingPerFrameDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LaneMarkingPerFrame>
     _instance;
} _LaneMarkingPerFrame_default_instance_;
class LaneMarkingPerCaptureDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LaneMarkingPerCapture>
     _instance;
} _LaneMarkingPerCapture_default_instance_;

namespace protobuf_LaneMarking_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarking, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarking, geometry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarking, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarkingPerFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarkingPerFrame, frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarkingPerFrame, lane_markings_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarkingPerCapture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarkingPerCapture, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarkingPerCapture, lane_marking_frames_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(LaneMarking)},
  { 8, -1, sizeof(LaneMarkingPerFrame)},
  { 15, -1, sizeof(LaneMarkingPerCapture)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneMarking_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneMarkingPerFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneMarkingPerCapture_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "LaneMarking.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _LaneMarking_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LaneMarking_default_instance_);_LaneMarkingPerFrame_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LaneMarkingPerFrame_default_instance_);_LaneMarkingPerCapture_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LaneMarkingPerCapture_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021LaneMarking.proto\022\005hdmap\"9\n\013LaneMarkin"
      "g\022\n\n\002id\030\001 \001(\005\022\020\n\010geometry\030\002 \001(\t\022\014\n\004type\030"
      "\003 \001(\005\"R\n\023LaneMarkingPerFrame\022\020\n\010frame_id"
      "\030\001 \001(\005\022)\n\rlane_markings\030\002 \003(\0132\022.hdmap.La"
      "neMarking\"b\n\025LaneMarkingPerCapture\022\020\n\010sc"
      "ene_id\030\001 \001(\t\0227\n\023lane_marking_frames\030\002 \003("
      "\0132\032.hdmap.LaneMarkingPerFrameb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 277);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LaneMarking.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_LaneMarking_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneMarking::kIdFieldNumber;
const int LaneMarking::kGeometryFieldNumber;
const int LaneMarking::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneMarking::LaneMarking()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LaneMarking_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap.LaneMarking)
}
LaneMarking::LaneMarking(const LaneMarking& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  geometry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.geometry().size() > 0) {
    geometry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geometry_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:hdmap.LaneMarking)
}

void LaneMarking::SharedCtor() {
  geometry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _cached_size_ = 0;
}

LaneMarking::~LaneMarking() {
  // @@protoc_insertion_point(destructor:hdmap.LaneMarking)
  SharedDtor();
}

void LaneMarking::SharedDtor() {
  geometry_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LaneMarking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneMarking::descriptor() {
  protobuf_LaneMarking_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LaneMarking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneMarking& LaneMarking::default_instance() {
  protobuf_LaneMarking_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneMarking* LaneMarking::New(::google::protobuf::Arena* arena) const {
  LaneMarking* n = new LaneMarking;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneMarking::Clear() {
// @@protoc_insertion_point(message_clear_start:hdmap.LaneMarking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geometry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool LaneMarking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap.LaneMarking)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string geometry = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geometry()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->geometry().data(), static_cast<int>(this->geometry().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hdmap.LaneMarking.geometry"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap.LaneMarking)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap.LaneMarking)
  return false;
#undef DO_
}

void LaneMarking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap.LaneMarking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string geometry = 2;
  if (this->geometry().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->geometry().data(), static_cast<int>(this->geometry().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hdmap.LaneMarking.geometry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->geometry(), output);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap.LaneMarking)
}

::google::protobuf::uint8* LaneMarking::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hdmap.LaneMarking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string geometry = 2;
  if (this->geometry().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->geometry().data(), static_cast<int>(this->geometry().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hdmap.LaneMarking.geometry");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->geometry(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap.LaneMarking)
  return target;
}

size_t LaneMarking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hdmap.LaneMarking)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string geometry = 2;
  if (this->geometry().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->geometry());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneMarking::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hdmap.LaneMarking)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneMarking* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneMarking>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hdmap.LaneMarking)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hdmap.LaneMarking)
    MergeFrom(*source);
  }
}

void LaneMarking::MergeFrom(const LaneMarking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hdmap.LaneMarking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.geometry().size() > 0) {

    geometry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geometry_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void LaneMarking::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hdmap.LaneMarking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneMarking::CopyFrom(const LaneMarking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hdmap.LaneMarking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMarking::IsInitialized() const {
  return true;
}

void LaneMarking::Swap(LaneMarking* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneMarking::InternalSwap(LaneMarking* other) {
  using std::swap;
  geometry_.Swap(&other->geometry_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneMarking::GetMetadata() const {
  protobuf_LaneMarking_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LaneMarking_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneMarking

// int32 id = 1;
void LaneMarking::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 LaneMarking::id() const {
  // @@protoc_insertion_point(field_get:hdmap.LaneMarking.id)
  return id_;
}
void LaneMarking::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:hdmap.LaneMarking.id)
}

// string geometry = 2;
void LaneMarking::clear_geometry() {
  geometry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LaneMarking::geometry() const {
  // @@protoc_insertion_point(field_get:hdmap.LaneMarking.geometry)
  return geometry_.GetNoArena();
}
void LaneMarking::set_geometry(const ::std::string& value) {
  
  geometry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hdmap.LaneMarking.geometry)
}
#if LANG_CXX11
void LaneMarking::set_geometry(::std::string&& value) {
  
  geometry_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hdmap.LaneMarking.geometry)
}
#endif
void LaneMarking::set_geometry(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  geometry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hdmap.LaneMarking.geometry)
}
void LaneMarking::set_geometry(const char* value, size_t size) {
  
  geometry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hdmap.LaneMarking.geometry)
}
::std::string* LaneMarking::mutable_geometry() {
  
  // @@protoc_insertion_point(field_mutable:hdmap.LaneMarking.geometry)
  return geometry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LaneMarking::release_geometry() {
  // @@protoc_insertion_point(field_release:hdmap.LaneMarking.geometry)
  
  return geometry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LaneMarking::set_allocated_geometry(::std::string* geometry) {
  if (geometry != NULL) {
    
  } else {
    
  }
  geometry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geometry);
  // @@protoc_insertion_point(field_set_allocated:hdmap.LaneMarking.geometry)
}

// int32 type = 3;
void LaneMarking::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 LaneMarking::type() const {
  // @@protoc_insertion_point(field_get:hdmap.LaneMarking.type)
  return type_;
}
void LaneMarking::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:hdmap.LaneMarking.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneMarkingPerFrame::kFrameIdFieldNumber;
const int LaneMarkingPerFrame::kLaneMarkingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneMarkingPerFrame::LaneMarkingPerFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LaneMarking_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap.LaneMarkingPerFrame)
}
LaneMarkingPerFrame::LaneMarkingPerFrame(const LaneMarkingPerFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lane_markings_(from.lane_markings_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_id_ = from.frame_id_;
  // @@protoc_insertion_point(copy_constructor:hdmap.LaneMarkingPerFrame)
}

void LaneMarkingPerFrame::SharedCtor() {
  frame_id_ = 0;
  _cached_size_ = 0;
}

LaneMarkingPerFrame::~LaneMarkingPerFrame() {
  // @@protoc_insertion_point(destructor:hdmap.LaneMarkingPerFrame)
  SharedDtor();
}

void LaneMarkingPerFrame::SharedDtor() {
}

void LaneMarkingPerFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneMarkingPerFrame::descriptor() {
  protobuf_LaneMarking_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LaneMarking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneMarkingPerFrame& LaneMarkingPerFrame::default_instance() {
  protobuf_LaneMarking_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneMarkingPerFrame* LaneMarkingPerFrame::New(::google::protobuf::Arena* arena) const {
  LaneMarkingPerFrame* n = new LaneMarkingPerFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneMarkingPerFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:hdmap.LaneMarkingPerFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_markings_.Clear();
  frame_id_ = 0;
  _internal_metadata_.Clear();
}

bool LaneMarkingPerFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap.LaneMarkingPerFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 frame_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hdmap.LaneMarking lane_markings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_markings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap.LaneMarkingPerFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap.LaneMarkingPerFrame)
  return false;
#undef DO_
}

void LaneMarkingPerFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap.LaneMarkingPerFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frame_id(), output);
  }

  // repeated .hdmap.LaneMarking lane_markings = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_markings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lane_markings(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap.LaneMarkingPerFrame)
}

::google::protobuf::uint8* LaneMarkingPerFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hdmap.LaneMarkingPerFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->frame_id(), target);
  }

  // repeated .hdmap.LaneMarking lane_markings = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_markings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->lane_markings(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap.LaneMarkingPerFrame)
  return target;
}

size_t LaneMarkingPerFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hdmap.LaneMarkingPerFrame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .hdmap.LaneMarking lane_markings = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_markings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_markings(static_cast<int>(i)));
    }
  }

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneMarkingPerFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hdmap.LaneMarkingPerFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneMarkingPerFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneMarkingPerFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hdmap.LaneMarkingPerFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hdmap.LaneMarkingPerFrame)
    MergeFrom(*source);
  }
}

void LaneMarkingPerFrame::MergeFrom(const LaneMarkingPerFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hdmap.LaneMarkingPerFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_markings_.MergeFrom(from.lane_markings_);
  if (from.frame_id() != 0) {
    set_frame_id(from.frame_id());
  }
}

void LaneMarkingPerFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hdmap.LaneMarkingPerFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneMarkingPerFrame::CopyFrom(const LaneMarkingPerFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hdmap.LaneMarkingPerFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMarkingPerFrame::IsInitialized() const {
  return true;
}

void LaneMarkingPerFrame::Swap(LaneMarkingPerFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneMarkingPerFrame::InternalSwap(LaneMarkingPerFrame* other) {
  using std::swap;
  lane_markings_.InternalSwap(&other->lane_markings_);
  swap(frame_id_, other->frame_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneMarkingPerFrame::GetMetadata() const {
  protobuf_LaneMarking_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LaneMarking_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneMarkingPerFrame

// int32 frame_id = 1;
void LaneMarkingPerFrame::clear_frame_id() {
  frame_id_ = 0;
}
::google::protobuf::int32 LaneMarkingPerFrame::frame_id() const {
  // @@protoc_insertion_point(field_get:hdmap.LaneMarkingPerFrame.frame_id)
  return frame_id_;
}
void LaneMarkingPerFrame::set_frame_id(::google::protobuf::int32 value) {
  
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:hdmap.LaneMarkingPerFrame.frame_id)
}

// repeated .hdmap.LaneMarking lane_markings = 2;
int LaneMarkingPerFrame::lane_markings_size() const {
  return lane_markings_.size();
}
void LaneMarkingPerFrame::clear_lane_markings() {
  lane_markings_.Clear();
}
const ::hdmap::LaneMarking& LaneMarkingPerFrame::lane_markings(int index) const {
  // @@protoc_insertion_point(field_get:hdmap.LaneMarkingPerFrame.lane_markings)
  return lane_markings_.Get(index);
}
::hdmap::LaneMarking* LaneMarkingPerFrame::mutable_lane_markings(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap.LaneMarkingPerFrame.lane_markings)
  return lane_markings_.Mutable(index);
}
::hdmap::LaneMarking* LaneMarkingPerFrame::add_lane_markings() {
  // @@protoc_insertion_point(field_add:hdmap.LaneMarkingPerFrame.lane_markings)
  return lane_markings_.Add();
}
::google::protobuf::RepeatedPtrField< ::hdmap::LaneMarking >*
LaneMarkingPerFrame::mutable_lane_markings() {
  // @@protoc_insertion_point(field_mutable_list:hdmap.LaneMarkingPerFrame.lane_markings)
  return &lane_markings_;
}
const ::google::protobuf::RepeatedPtrField< ::hdmap::LaneMarking >&
LaneMarkingPerFrame::lane_markings() const {
  // @@protoc_insertion_point(field_list:hdmap.LaneMarkingPerFrame.lane_markings)
  return lane_markings_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneMarkingPerCapture::kSceneIdFieldNumber;
const int LaneMarkingPerCapture::kLaneMarkingFramesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneMarkingPerCapture::LaneMarkingPerCapture()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LaneMarking_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap.LaneMarkingPerCapture)
}
LaneMarkingPerCapture::LaneMarkingPerCapture(const LaneMarkingPerCapture& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lane_marking_frames_(from.lane_marking_frames_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scene_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.scene_id().size() > 0) {
    scene_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scene_id_);
  }
  // @@protoc_insertion_point(copy_constructor:hdmap.LaneMarkingPerCapture)
}

void LaneMarkingPerCapture::SharedCtor() {
  scene_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

LaneMarkingPerCapture::~LaneMarkingPerCapture() {
  // @@protoc_insertion_point(destructor:hdmap.LaneMarkingPerCapture)
  SharedDtor();
}

void LaneMarkingPerCapture::SharedDtor() {
  scene_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LaneMarkingPerCapture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneMarkingPerCapture::descriptor() {
  protobuf_LaneMarking_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LaneMarking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneMarkingPerCapture& LaneMarkingPerCapture::default_instance() {
  protobuf_LaneMarking_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneMarkingPerCapture* LaneMarkingPerCapture::New(::google::protobuf::Arena* arena) const {
  LaneMarkingPerCapture* n = new LaneMarkingPerCapture;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneMarkingPerCapture::Clear() {
// @@protoc_insertion_point(message_clear_start:hdmap.LaneMarkingPerCapture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_marking_frames_.Clear();
  scene_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool LaneMarkingPerCapture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap.LaneMarkingPerCapture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string scene_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scene_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scene_id().data(), static_cast<int>(this->scene_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hdmap.LaneMarkingPerCapture.scene_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hdmap.LaneMarkingPerFrame lane_marking_frames = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_marking_frames()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap.LaneMarkingPerCapture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap.LaneMarkingPerCapture)
  return false;
#undef DO_
}

void LaneMarkingPerCapture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap.LaneMarkingPerCapture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string scene_id = 1;
  if (this->scene_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scene_id().data(), static_cast<int>(this->scene_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hdmap.LaneMarkingPerCapture.scene_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->scene_id(), output);
  }

  // repeated .hdmap.LaneMarkingPerFrame lane_marking_frames = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_marking_frames_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lane_marking_frames(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap.LaneMarkingPerCapture)
}

::google::protobuf::uint8* LaneMarkingPerCapture::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hdmap.LaneMarkingPerCapture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string scene_id = 1;
  if (this->scene_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scene_id().data(), static_cast<int>(this->scene_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hdmap.LaneMarkingPerCapture.scene_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->scene_id(), target);
  }

  // repeated .hdmap.LaneMarkingPerFrame lane_marking_frames = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_marking_frames_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->lane_marking_frames(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap.LaneMarkingPerCapture)
  return target;
}

size_t LaneMarkingPerCapture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hdmap.LaneMarkingPerCapture)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .hdmap.LaneMarkingPerFrame lane_marking_frames = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_marking_frames_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_marking_frames(static_cast<int>(i)));
    }
  }

  // string scene_id = 1;
  if (this->scene_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scene_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneMarkingPerCapture::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hdmap.LaneMarkingPerCapture)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneMarkingPerCapture* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneMarkingPerCapture>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hdmap.LaneMarkingPerCapture)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hdmap.LaneMarkingPerCapture)
    MergeFrom(*source);
  }
}

void LaneMarkingPerCapture::MergeFrom(const LaneMarkingPerCapture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hdmap.LaneMarkingPerCapture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_marking_frames_.MergeFrom(from.lane_marking_frames_);
  if (from.scene_id().size() > 0) {

    scene_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scene_id_);
  }
}

void LaneMarkingPerCapture::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hdmap.LaneMarkingPerCapture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneMarkingPerCapture::CopyFrom(const LaneMarkingPerCapture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hdmap.LaneMarkingPerCapture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMarkingPerCapture::IsInitialized() const {
  return true;
}

void LaneMarkingPerCapture::Swap(LaneMarkingPerCapture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneMarkingPerCapture::InternalSwap(LaneMarkingPerCapture* other) {
  using std::swap;
  lane_marking_frames_.InternalSwap(&other->lane_marking_frames_);
  scene_id_.Swap(&other->scene_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneMarkingPerCapture::GetMetadata() const {
  protobuf_LaneMarking_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LaneMarking_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneMarkingPerCapture

// string scene_id = 1;
void LaneMarkingPerCapture::clear_scene_id() {
  scene_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LaneMarkingPerCapture::scene_id() const {
  // @@protoc_insertion_point(field_get:hdmap.LaneMarkingPerCapture.scene_id)
  return scene_id_.GetNoArena();
}
void LaneMarkingPerCapture::set_scene_id(const ::std::string& value) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hdmap.LaneMarkingPerCapture.scene_id)
}
#if LANG_CXX11
void LaneMarkingPerCapture::set_scene_id(::std::string&& value) {
  
  scene_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hdmap.LaneMarkingPerCapture.scene_id)
}
#endif
void LaneMarkingPerCapture::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hdmap.LaneMarkingPerCapture.scene_id)
}
void LaneMarkingPerCapture::set_scene_id(const char* value, size_t size) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hdmap.LaneMarkingPerCapture.scene_id)
}
::std::string* LaneMarkingPerCapture::mutable_scene_id() {
  
  // @@protoc_insertion_point(field_mutable:hdmap.LaneMarkingPerCapture.scene_id)
  return scene_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LaneMarkingPerCapture::release_scene_id() {
  // @@protoc_insertion_point(field_release:hdmap.LaneMarkingPerCapture.scene_id)
  
  return scene_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LaneMarkingPerCapture::set_allocated_scene_id(::std::string* scene_id) {
  if (scene_id != NULL) {
    
  } else {
    
  }
  scene_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene_id);
  // @@protoc_insertion_point(field_set_allocated:hdmap.LaneMarkingPerCapture.scene_id)
}

// repeated .hdmap.LaneMarkingPerFrame lane_marking_frames = 2;
int LaneMarkingPerCapture::lane_marking_frames_size() const {
  return lane_marking_frames_.size();
}
void LaneMarkingPerCapture::clear_lane_marking_frames() {
  lane_marking_frames_.Clear();
}
const ::hdmap::LaneMarkingPerFrame& LaneMarkingPerCapture::lane_marking_frames(int index) const {
  // @@protoc_insertion_point(field_get:hdmap.LaneMarkingPerCapture.lane_marking_frames)
  return lane_marking_frames_.Get(index);
}
::hdmap::LaneMarkingPerFrame* LaneMarkingPerCapture::mutable_lane_marking_frames(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap.LaneMarkingPerCapture.lane_marking_frames)
  return lane_marking_frames_.Mutable(index);
}
::hdmap::LaneMarkingPerFrame* LaneMarkingPerCapture::add_lane_marking_frames() {
  // @@protoc_insertion_point(field_add:hdmap.LaneMarkingPerCapture.lane_marking_frames)
  return lane_marking_frames_.Add();
}
::google::protobuf::RepeatedPtrField< ::hdmap::LaneMarkingPerFrame >*
LaneMarkingPerCapture::mutable_lane_marking_frames() {
  // @@protoc_insertion_point(field_mutable_list:hdmap.LaneMarkingPerCapture.lane_marking_frames)
  return &lane_marking_frames_;
}
const ::google::protobuf::RepeatedPtrField< ::hdmap::LaneMarkingPerFrame >&
LaneMarkingPerCapture::lane_marking_frames() const {
  // @@protoc_insertion_point(field_list:hdmap.LaneMarkingPerCapture.lane_marking_frames)
  return lane_marking_frames_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap

// @@protoc_insertion_point(global_scope)
