// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Divider.proto

#ifndef PROTOBUF_Divider_2eproto__INCLUDED
#define PROTOBUF_Divider_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace hdmap {
class Divider;
class DividerDefaultTypeInternal;
extern DividerDefaultTypeInternal _Divider_default_instance_;
class DividerPerCapture;
class DividerPerCaptureDefaultTypeInternal;
extern DividerPerCaptureDefaultTypeInternal _DividerPerCapture_default_instance_;
class DividerPerFrame;
class DividerPerFrameDefaultTypeInternal;
extern DividerPerFrameDefaultTypeInternal _DividerPerFrame_default_instance_;
}  // namespace hdmap

namespace hdmap {

namespace protobuf_Divider_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Divider_2eproto

// ===================================================================

class Divider : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hdmap.Divider) */ {
 public:
  Divider();
  virtual ~Divider();

  Divider(const Divider& from);

  inline Divider& operator=(const Divider& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Divider(Divider&& from) noexcept
    : Divider() {
    *this = ::std::move(from);
  }

  inline Divider& operator=(Divider&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Divider& default_instance();

  static inline const Divider* internal_default_instance() {
    return reinterpret_cast<const Divider*>(
               &_Divider_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Divider* other);
  friend void swap(Divider& a, Divider& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Divider* New() const PROTOBUF_FINAL { return New(NULL); }

  Divider* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Divider& from);
  void MergeFrom(const Divider& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Divider* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string geometry = 2;
  void clear_geometry();
  static const int kGeometryFieldNumber = 2;
  const ::std::string& geometry() const;
  void set_geometry(const ::std::string& value);
  #if LANG_CXX11
  void set_geometry(::std::string&& value);
  #endif
  void set_geometry(const char* value);
  void set_geometry(const char* value, size_t size);
  ::std::string* mutable_geometry();
  ::std::string* release_geometry();
  void set_allocated_geometry(::std::string* geometry);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 color = 3;
  void clear_color();
  static const int kColorFieldNumber = 3;
  ::google::protobuf::int32 color() const;
  void set_color(::google::protobuf::int32 value);

  // int32 type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 occlusion = 5;
  void clear_occlusion();
  static const int kOcclusionFieldNumber = 5;
  ::google::protobuf::int32 occlusion() const;
  void set_occlusion(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:hdmap.Divider)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr geometry_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 color_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 occlusion_;
  mutable int _cached_size_;
  friend struct protobuf_Divider_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DividerPerFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hdmap.DividerPerFrame) */ {
 public:
  DividerPerFrame();
  virtual ~DividerPerFrame();

  DividerPerFrame(const DividerPerFrame& from);

  inline DividerPerFrame& operator=(const DividerPerFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DividerPerFrame(DividerPerFrame&& from) noexcept
    : DividerPerFrame() {
    *this = ::std::move(from);
  }

  inline DividerPerFrame& operator=(DividerPerFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DividerPerFrame& default_instance();

  static inline const DividerPerFrame* internal_default_instance() {
    return reinterpret_cast<const DividerPerFrame*>(
               &_DividerPerFrame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DividerPerFrame* other);
  friend void swap(DividerPerFrame& a, DividerPerFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DividerPerFrame* New() const PROTOBUF_FINAL { return New(NULL); }

  DividerPerFrame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DividerPerFrame& from);
  void MergeFrom(const DividerPerFrame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DividerPerFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .hdmap.Divider dividers = 2;
  int dividers_size() const;
  void clear_dividers();
  static const int kDividersFieldNumber = 2;
  const ::hdmap::Divider& dividers(int index) const;
  ::hdmap::Divider* mutable_dividers(int index);
  ::hdmap::Divider* add_dividers();
  ::google::protobuf::RepeatedPtrField< ::hdmap::Divider >*
      mutable_dividers();
  const ::google::protobuf::RepeatedPtrField< ::hdmap::Divider >&
      dividers() const;

  // int32 frame_id = 1;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 1;
  ::google::protobuf::int32 frame_id() const;
  void set_frame_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:hdmap.DividerPerFrame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::hdmap::Divider > dividers_;
  ::google::protobuf::int32 frame_id_;
  mutable int _cached_size_;
  friend struct protobuf_Divider_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DividerPerCapture : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hdmap.DividerPerCapture) */ {
 public:
  DividerPerCapture();
  virtual ~DividerPerCapture();

  DividerPerCapture(const DividerPerCapture& from);

  inline DividerPerCapture& operator=(const DividerPerCapture& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DividerPerCapture(DividerPerCapture&& from) noexcept
    : DividerPerCapture() {
    *this = ::std::move(from);
  }

  inline DividerPerCapture& operator=(DividerPerCapture&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DividerPerCapture& default_instance();

  static inline const DividerPerCapture* internal_default_instance() {
    return reinterpret_cast<const DividerPerCapture*>(
               &_DividerPerCapture_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DividerPerCapture* other);
  friend void swap(DividerPerCapture& a, DividerPerCapture& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DividerPerCapture* New() const PROTOBUF_FINAL { return New(NULL); }

  DividerPerCapture* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DividerPerCapture& from);
  void MergeFrom(const DividerPerCapture& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DividerPerCapture* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .hdmap.DividerPerFrame divider_frames = 2;
  int divider_frames_size() const;
  void clear_divider_frames();
  static const int kDividerFramesFieldNumber = 2;
  const ::hdmap::DividerPerFrame& divider_frames(int index) const;
  ::hdmap::DividerPerFrame* mutable_divider_frames(int index);
  ::hdmap::DividerPerFrame* add_divider_frames();
  ::google::protobuf::RepeatedPtrField< ::hdmap::DividerPerFrame >*
      mutable_divider_frames();
  const ::google::protobuf::RepeatedPtrField< ::hdmap::DividerPerFrame >&
      divider_frames() const;

  // string scene_id = 1;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 1;
  const ::std::string& scene_id() const;
  void set_scene_id(const ::std::string& value);
  #if LANG_CXX11
  void set_scene_id(::std::string&& value);
  #endif
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  ::std::string* mutable_scene_id();
  ::std::string* release_scene_id();
  void set_allocated_scene_id(::std::string* scene_id);

  // @@protoc_insertion_point(class_scope:hdmap.DividerPerCapture)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::hdmap::DividerPerFrame > divider_frames_;
  ::google::protobuf::internal::ArenaStringPtr scene_id_;
  mutable int _cached_size_;
  friend struct protobuf_Divider_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Divider

// int32 id = 1;
inline void Divider::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Divider::id() const {
  // @@protoc_insertion_point(field_get:hdmap.Divider.id)
  return id_;
}
inline void Divider::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:hdmap.Divider.id)
}

// string geometry = 2;
inline void Divider::clear_geometry() {
  geometry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Divider::geometry() const {
  // @@protoc_insertion_point(field_get:hdmap.Divider.geometry)
  return geometry_.GetNoArena();
}
inline void Divider::set_geometry(const ::std::string& value) {
  
  geometry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hdmap.Divider.geometry)
}
#if LANG_CXX11
inline void Divider::set_geometry(::std::string&& value) {
  
  geometry_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hdmap.Divider.geometry)
}
#endif
inline void Divider::set_geometry(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  geometry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hdmap.Divider.geometry)
}
inline void Divider::set_geometry(const char* value, size_t size) {
  
  geometry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hdmap.Divider.geometry)
}
inline ::std::string* Divider::mutable_geometry() {
  
  // @@protoc_insertion_point(field_mutable:hdmap.Divider.geometry)
  return geometry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Divider::release_geometry() {
  // @@protoc_insertion_point(field_release:hdmap.Divider.geometry)
  
  return geometry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Divider::set_allocated_geometry(::std::string* geometry) {
  if (geometry != NULL) {
    
  } else {
    
  }
  geometry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geometry);
  // @@protoc_insertion_point(field_set_allocated:hdmap.Divider.geometry)
}

// int32 color = 3;
inline void Divider::clear_color() {
  color_ = 0;
}
inline ::google::protobuf::int32 Divider::color() const {
  // @@protoc_insertion_point(field_get:hdmap.Divider.color)
  return color_;
}
inline void Divider::set_color(::google::protobuf::int32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:hdmap.Divider.color)
}

// int32 type = 4;
inline void Divider::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 Divider::type() const {
  // @@protoc_insertion_point(field_get:hdmap.Divider.type)
  return type_;
}
inline void Divider::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:hdmap.Divider.type)
}

// int32 occlusion = 5;
inline void Divider::clear_occlusion() {
  occlusion_ = 0;
}
inline ::google::protobuf::int32 Divider::occlusion() const {
  // @@protoc_insertion_point(field_get:hdmap.Divider.occlusion)
  return occlusion_;
}
inline void Divider::set_occlusion(::google::protobuf::int32 value) {
  
  occlusion_ = value;
  // @@protoc_insertion_point(field_set:hdmap.Divider.occlusion)
}

// -------------------------------------------------------------------

// DividerPerFrame

// int32 frame_id = 1;
inline void DividerPerFrame::clear_frame_id() {
  frame_id_ = 0;
}
inline ::google::protobuf::int32 DividerPerFrame::frame_id() const {
  // @@protoc_insertion_point(field_get:hdmap.DividerPerFrame.frame_id)
  return frame_id_;
}
inline void DividerPerFrame::set_frame_id(::google::protobuf::int32 value) {
  
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:hdmap.DividerPerFrame.frame_id)
}

// repeated .hdmap.Divider dividers = 2;
inline int DividerPerFrame::dividers_size() const {
  return dividers_.size();
}
inline void DividerPerFrame::clear_dividers() {
  dividers_.Clear();
}
inline const ::hdmap::Divider& DividerPerFrame::dividers(int index) const {
  // @@protoc_insertion_point(field_get:hdmap.DividerPerFrame.dividers)
  return dividers_.Get(index);
}
inline ::hdmap::Divider* DividerPerFrame::mutable_dividers(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap.DividerPerFrame.dividers)
  return dividers_.Mutable(index);
}
inline ::hdmap::Divider* DividerPerFrame::add_dividers() {
  // @@protoc_insertion_point(field_add:hdmap.DividerPerFrame.dividers)
  return dividers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap::Divider >*
DividerPerFrame::mutable_dividers() {
  // @@protoc_insertion_point(field_mutable_list:hdmap.DividerPerFrame.dividers)
  return &dividers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap::Divider >&
DividerPerFrame::dividers() const {
  // @@protoc_insertion_point(field_list:hdmap.DividerPerFrame.dividers)
  return dividers_;
}

// -------------------------------------------------------------------

// DividerPerCapture

// string scene_id = 1;
inline void DividerPerCapture::clear_scene_id() {
  scene_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DividerPerCapture::scene_id() const {
  // @@protoc_insertion_point(field_get:hdmap.DividerPerCapture.scene_id)
  return scene_id_.GetNoArena();
}
inline void DividerPerCapture::set_scene_id(const ::std::string& value) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hdmap.DividerPerCapture.scene_id)
}
#if LANG_CXX11
inline void DividerPerCapture::set_scene_id(::std::string&& value) {
  
  scene_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hdmap.DividerPerCapture.scene_id)
}
#endif
inline void DividerPerCapture::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hdmap.DividerPerCapture.scene_id)
}
inline void DividerPerCapture::set_scene_id(const char* value, size_t size) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hdmap.DividerPerCapture.scene_id)
}
inline ::std::string* DividerPerCapture::mutable_scene_id() {
  
  // @@protoc_insertion_point(field_mutable:hdmap.DividerPerCapture.scene_id)
  return scene_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DividerPerCapture::release_scene_id() {
  // @@protoc_insertion_point(field_release:hdmap.DividerPerCapture.scene_id)
  
  return scene_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DividerPerCapture::set_allocated_scene_id(::std::string* scene_id) {
  if (scene_id != NULL) {
    
  } else {
    
  }
  scene_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene_id);
  // @@protoc_insertion_point(field_set_allocated:hdmap.DividerPerCapture.scene_id)
}

// repeated .hdmap.DividerPerFrame divider_frames = 2;
inline int DividerPerCapture::divider_frames_size() const {
  return divider_frames_.size();
}
inline void DividerPerCapture::clear_divider_frames() {
  divider_frames_.Clear();
}
inline const ::hdmap::DividerPerFrame& DividerPerCapture::divider_frames(int index) const {
  // @@protoc_insertion_point(field_get:hdmap.DividerPerCapture.divider_frames)
  return divider_frames_.Get(index);
}
inline ::hdmap::DividerPerFrame* DividerPerCapture::mutable_divider_frames(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap.DividerPerCapture.divider_frames)
  return divider_frames_.Mutable(index);
}
inline ::hdmap::DividerPerFrame* DividerPerCapture::add_divider_frames() {
  // @@protoc_insertion_point(field_add:hdmap.DividerPerCapture.divider_frames)
  return divider_frames_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap::DividerPerFrame >*
DividerPerCapture::mutable_divider_frames() {
  // @@protoc_insertion_point(field_mutable_list:hdmap.DividerPerCapture.divider_frames)
  return &divider_frames_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap::DividerPerFrame >&
DividerPerCapture::divider_frames() const {
  // @@protoc_insertion_point(field_list:hdmap.DividerPerCapture.divider_frames)
  return divider_frames_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace hdmap

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Divider_2eproto__INCLUDED
