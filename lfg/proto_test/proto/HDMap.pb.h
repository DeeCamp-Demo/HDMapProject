// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HDMap.proto

#ifndef PROTOBUF_HDMap_2eproto__INCLUDED
#define PROTOBUF_HDMap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Divider.pb.h"
#include "TrafficLight.pb.h"
#include "LaneMarking.pb.h"
// @@protoc_insertion_point(includes)
namespace hdmap {
class HDMap;
class HDMapDefaultTypeInternal;
extern HDMapDefaultTypeInternal _HDMap_default_instance_;
}  // namespace hdmap

namespace hdmap {

namespace protobuf_HDMap_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_HDMap_2eproto

// ===================================================================

class HDMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hdmap.HDMap) */ {
 public:
  HDMap();
  virtual ~HDMap();

  HDMap(const HDMap& from);

  inline HDMap& operator=(const HDMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HDMap(HDMap&& from) noexcept
    : HDMap() {
    *this = ::std::move(from);
  }

  inline HDMap& operator=(HDMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HDMap& default_instance();

  static inline const HDMap* internal_default_instance() {
    return reinterpret_cast<const HDMap*>(
               &_HDMap_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(HDMap* other);
  friend void swap(HDMap& a, HDMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HDMap* New() const PROTOBUF_FINAL { return New(NULL); }

  HDMap* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HDMap& from);
  void MergeFrom(const HDMap& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HDMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .hdmap.Divider dividers = 2;
  int dividers_size() const;
  void clear_dividers();
  static const int kDividersFieldNumber = 2;
  const ::hdmap::Divider& dividers(int index) const;
  ::hdmap::Divider* mutable_dividers(int index);
  ::hdmap::Divider* add_dividers();
  ::google::protobuf::RepeatedPtrField< ::hdmap::Divider >*
      mutable_dividers();
  const ::google::protobuf::RepeatedPtrField< ::hdmap::Divider >&
      dividers() const;

  // repeated .hdmap.TrafficLight tafficlights = 3;
  int tafficlights_size() const;
  void clear_tafficlights();
  static const int kTafficlightsFieldNumber = 3;
  const ::hdmap::TrafficLight& tafficlights(int index) const;
  ::hdmap::TrafficLight* mutable_tafficlights(int index);
  ::hdmap::TrafficLight* add_tafficlights();
  ::google::protobuf::RepeatedPtrField< ::hdmap::TrafficLight >*
      mutable_tafficlights();
  const ::google::protobuf::RepeatedPtrField< ::hdmap::TrafficLight >&
      tafficlights() const;

  // repeated .hdmap.LaneMarking lanemarkings = 4;
  int lanemarkings_size() const;
  void clear_lanemarkings();
  static const int kLanemarkingsFieldNumber = 4;
  const ::hdmap::LaneMarking& lanemarkings(int index) const;
  ::hdmap::LaneMarking* mutable_lanemarkings(int index);
  ::hdmap::LaneMarking* add_lanemarkings();
  ::google::protobuf::RepeatedPtrField< ::hdmap::LaneMarking >*
      mutable_lanemarkings();
  const ::google::protobuf::RepeatedPtrField< ::hdmap::LaneMarking >&
      lanemarkings() const;

  // string scene_id = 1;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 1;
  const ::std::string& scene_id() const;
  void set_scene_id(const ::std::string& value);
  #if LANG_CXX11
  void set_scene_id(::std::string&& value);
  #endif
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  ::std::string* mutable_scene_id();
  ::std::string* release_scene_id();
  void set_allocated_scene_id(::std::string* scene_id);

  // string version = 5;
  void clear_version();
  static const int kVersionFieldNumber = 5;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:hdmap.HDMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::hdmap::Divider > dividers_;
  ::google::protobuf::RepeatedPtrField< ::hdmap::TrafficLight > tafficlights_;
  ::google::protobuf::RepeatedPtrField< ::hdmap::LaneMarking > lanemarkings_;
  ::google::protobuf::internal::ArenaStringPtr scene_id_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  mutable int _cached_size_;
  friend struct protobuf_HDMap_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HDMap

// string scene_id = 1;
inline void HDMap::clear_scene_id() {
  scene_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDMap::scene_id() const {
  // @@protoc_insertion_point(field_get:hdmap.HDMap.scene_id)
  return scene_id_.GetNoArena();
}
inline void HDMap::set_scene_id(const ::std::string& value) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hdmap.HDMap.scene_id)
}
#if LANG_CXX11
inline void HDMap::set_scene_id(::std::string&& value) {
  
  scene_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hdmap.HDMap.scene_id)
}
#endif
inline void HDMap::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hdmap.HDMap.scene_id)
}
inline void HDMap::set_scene_id(const char* value, size_t size) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hdmap.HDMap.scene_id)
}
inline ::std::string* HDMap::mutable_scene_id() {
  
  // @@protoc_insertion_point(field_mutable:hdmap.HDMap.scene_id)
  return scene_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDMap::release_scene_id() {
  // @@protoc_insertion_point(field_release:hdmap.HDMap.scene_id)
  
  return scene_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDMap::set_allocated_scene_id(::std::string* scene_id) {
  if (scene_id != NULL) {
    
  } else {
    
  }
  scene_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene_id);
  // @@protoc_insertion_point(field_set_allocated:hdmap.HDMap.scene_id)
}

// repeated .hdmap.Divider dividers = 2;
inline int HDMap::dividers_size() const {
  return dividers_.size();
}
inline void HDMap::clear_dividers() {
  dividers_.Clear();
}
inline const ::hdmap::Divider& HDMap::dividers(int index) const {
  // @@protoc_insertion_point(field_get:hdmap.HDMap.dividers)
  return dividers_.Get(index);
}
inline ::hdmap::Divider* HDMap::mutable_dividers(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap.HDMap.dividers)
  return dividers_.Mutable(index);
}
inline ::hdmap::Divider* HDMap::add_dividers() {
  // @@protoc_insertion_point(field_add:hdmap.HDMap.dividers)
  return dividers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap::Divider >*
HDMap::mutable_dividers() {
  // @@protoc_insertion_point(field_mutable_list:hdmap.HDMap.dividers)
  return &dividers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap::Divider >&
HDMap::dividers() const {
  // @@protoc_insertion_point(field_list:hdmap.HDMap.dividers)
  return dividers_;
}

// repeated .hdmap.TrafficLight tafficlights = 3;
inline int HDMap::tafficlights_size() const {
  return tafficlights_.size();
}
inline void HDMap::clear_tafficlights() {
  tafficlights_.Clear();
}
inline const ::hdmap::TrafficLight& HDMap::tafficlights(int index) const {
  // @@protoc_insertion_point(field_get:hdmap.HDMap.tafficlights)
  return tafficlights_.Get(index);
}
inline ::hdmap::TrafficLight* HDMap::mutable_tafficlights(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap.HDMap.tafficlights)
  return tafficlights_.Mutable(index);
}
inline ::hdmap::TrafficLight* HDMap::add_tafficlights() {
  // @@protoc_insertion_point(field_add:hdmap.HDMap.tafficlights)
  return tafficlights_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap::TrafficLight >*
HDMap::mutable_tafficlights() {
  // @@protoc_insertion_point(field_mutable_list:hdmap.HDMap.tafficlights)
  return &tafficlights_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap::TrafficLight >&
HDMap::tafficlights() const {
  // @@protoc_insertion_point(field_list:hdmap.HDMap.tafficlights)
  return tafficlights_;
}

// repeated .hdmap.LaneMarking lanemarkings = 4;
inline int HDMap::lanemarkings_size() const {
  return lanemarkings_.size();
}
inline void HDMap::clear_lanemarkings() {
  lanemarkings_.Clear();
}
inline const ::hdmap::LaneMarking& HDMap::lanemarkings(int index) const {
  // @@protoc_insertion_point(field_get:hdmap.HDMap.lanemarkings)
  return lanemarkings_.Get(index);
}
inline ::hdmap::LaneMarking* HDMap::mutable_lanemarkings(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap.HDMap.lanemarkings)
  return lanemarkings_.Mutable(index);
}
inline ::hdmap::LaneMarking* HDMap::add_lanemarkings() {
  // @@protoc_insertion_point(field_add:hdmap.HDMap.lanemarkings)
  return lanemarkings_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap::LaneMarking >*
HDMap::mutable_lanemarkings() {
  // @@protoc_insertion_point(field_mutable_list:hdmap.HDMap.lanemarkings)
  return &lanemarkings_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap::LaneMarking >&
HDMap::lanemarkings() const {
  // @@protoc_insertion_point(field_list:hdmap.HDMap.lanemarkings)
  return lanemarkings_;
}

// string version = 5;
inline void HDMap::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDMap::version() const {
  // @@protoc_insertion_point(field_get:hdmap.HDMap.version)
  return version_.GetNoArena();
}
inline void HDMap::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hdmap.HDMap.version)
}
#if LANG_CXX11
inline void HDMap::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hdmap.HDMap.version)
}
#endif
inline void HDMap::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hdmap.HDMap.version)
}
inline void HDMap::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hdmap.HDMap.version)
}
inline ::std::string* HDMap::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:hdmap.HDMap.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDMap::release_version() {
  // @@protoc_insertion_point(field_release:hdmap.HDMap.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDMap::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:hdmap.HDMap.version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace hdmap

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HDMap_2eproto__INCLUDED
