# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: Divider.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='Divider.proto',
  package='hdmap',
  syntax='proto3',
  serialized_pb=_b('\n\rDivider.proto\x12\x05hdmap\"W\n\x07\x44ivider\x12\n\n\x02id\x18\x01 \x01(\x05\x12\x10\n\x08geometry\x18\x02 \x01(\t\x12\r\n\x05\x63olor\x18\x03 \x01(\x05\x12\x0c\n\x04type\x18\x04 \x01(\x05\x12\x11\n\tocclusion\x18\x05 \x01(\x05\"E\n\x0f\x44ividerPerFrame\x12\x10\n\x08\x66rame_id\x18\x01 \x01(\x05\x12 \n\x08\x64ividers\x18\x02 \x03(\x0b\x32\x0e.hdmap.Divider\"U\n\x11\x44ividerPerCapture\x12\x10\n\x08scene_id\x18\x01 \x01(\t\x12.\n\x0e\x64ivider_frames\x18\x02 \x03(\x0b\x32\x16.hdmap.DividerPerFrameb\x06proto3')
)




_DIVIDER = _descriptor.Descriptor(
  name='Divider',
  full_name='hdmap.Divider',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='hdmap.Divider.id', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='geometry', full_name='hdmap.Divider.geometry', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='color', full_name='hdmap.Divider.color', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='type', full_name='hdmap.Divider.type', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='occlusion', full_name='hdmap.Divider.occlusion', index=4,
      number=5, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=24,
  serialized_end=111,
)


_DIVIDERPERFRAME = _descriptor.Descriptor(
  name='DividerPerFrame',
  full_name='hdmap.DividerPerFrame',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='frame_id', full_name='hdmap.DividerPerFrame.frame_id', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='dividers', full_name='hdmap.DividerPerFrame.dividers', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=113,
  serialized_end=182,
)


_DIVIDERPERCAPTURE = _descriptor.Descriptor(
  name='DividerPerCapture',
  full_name='hdmap.DividerPerCapture',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='scene_id', full_name='hdmap.DividerPerCapture.scene_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='divider_frames', full_name='hdmap.DividerPerCapture.divider_frames', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=184,
  serialized_end=269,
)

_DIVIDERPERFRAME.fields_by_name['dividers'].message_type = _DIVIDER
_DIVIDERPERCAPTURE.fields_by_name['divider_frames'].message_type = _DIVIDERPERFRAME
DESCRIPTOR.message_types_by_name['Divider'] = _DIVIDER
DESCRIPTOR.message_types_by_name['DividerPerFrame'] = _DIVIDERPERFRAME
DESCRIPTOR.message_types_by_name['DividerPerCapture'] = _DIVIDERPERCAPTURE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Divider = _reflection.GeneratedProtocolMessageType('Divider', (_message.Message,), dict(
  DESCRIPTOR = _DIVIDER,
  __module__ = 'Divider_pb2'
  # @@protoc_insertion_point(class_scope:hdmap.Divider)
  ))
_sym_db.RegisterMessage(Divider)

DividerPerFrame = _reflection.GeneratedProtocolMessageType('DividerPerFrame', (_message.Message,), dict(
  DESCRIPTOR = _DIVIDERPERFRAME,
  __module__ = 'Divider_pb2'
  # @@protoc_insertion_point(class_scope:hdmap.DividerPerFrame)
  ))
_sym_db.RegisterMessage(DividerPerFrame)

DividerPerCapture = _reflection.GeneratedProtocolMessageType('DividerPerCapture', (_message.Message,), dict(
  DESCRIPTOR = _DIVIDERPERCAPTURE,
  __module__ = 'Divider_pb2'
  # @@protoc_insertion_point(class_scope:hdmap.DividerPerCapture)
  ))
_sym_db.RegisterMessage(DividerPerCapture)


# @@protoc_insertion_point(module_scope)
