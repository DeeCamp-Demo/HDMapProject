// Generated by gencpp from file hd_map/element.msg
// DO NOT EDIT!


#ifndef HD_MAP_MESSAGE_ELEMENT_H
#define HD_MAP_MESSAGE_ELEMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/PointCloud2.h>

namespace hd_map
{
template <class ContainerAllocator>
struct element_
{
  typedef element_<ContainerAllocator> Type;

  element_()
    : id(0)
    , color(0)
    , element_type(0)
    , pointclouds()
    , direction()  {
    }
  element_(const ContainerAllocator& _alloc)
    : id(0)
    , color(0)
    , element_type(0)
    , pointclouds(_alloc)
    , direction(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef uint8_t _color_type;
  _color_type color;

   typedef uint8_t _element_type_type;
  _element_type_type element_type;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _pointclouds_type;
  _pointclouds_type pointclouds;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _direction_type;
  _direction_type direction;





  typedef boost::shared_ptr< ::hd_map::element_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hd_map::element_<ContainerAllocator> const> ConstPtr;

}; // struct element_

typedef ::hd_map::element_<std::allocator<void> > element;

typedef boost::shared_ptr< ::hd_map::element > elementPtr;
typedef boost::shared_ptr< ::hd_map::element const> elementConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hd_map::element_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hd_map::element_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hd_map

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'hd_map': ['/home/apple/catkin_ws/src/hd_map/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hd_map::element_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hd_map::element_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hd_map::element_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hd_map::element_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hd_map::element_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hd_map::element_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hd_map::element_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b5b86d1178a9149c51a2d5dfef164311";
  }

  static const char* value(const ::hd_map::element_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb5b86d1178a9149cULL;
  static const uint64_t static_value2 = 0x51a2d5dfef164311ULL;
};

template<class ContainerAllocator>
struct DataType< ::hd_map::element_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hd_map/element";
  }

  static const char* value(const ::hd_map::element_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hd_map::element_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 id\n\
uint8 color\n\
uint8 element_type\n\
sensor_msgs/PointCloud2 pointclouds\n\
uint8[] direction\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointCloud2\n\
# This message holds a collection of N-dimensional points, which may\n\
# contain additional information such as normals, intensity, etc. The\n\
# point data is stored as a binary blob, its layout described by the\n\
# contents of the \"fields\" array.\n\
\n\
# The point cloud data may be organized 2d (image-like) or 1d\n\
# (unordered). Point clouds organized as 2d images may be produced by\n\
# camera depth sensors such as stereo or time-of-flight.\n\
\n\
# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n\
# points).\n\
Header header\n\
\n\
# 2D structure of the point cloud. If the cloud is unordered, height is\n\
# 1 and width is the length of the point cloud.\n\
uint32 height\n\
uint32 width\n\
\n\
# Describes the channels and their layout in the binary data blob.\n\
PointField[] fields\n\
\n\
bool    is_bigendian # Is this data bigendian?\n\
uint32  point_step   # Length of a point in bytes\n\
uint32  row_step     # Length of a row in bytes\n\
uint8[] data         # Actual point data, size is (row_step*height)\n\
\n\
bool is_dense        # True if there are no invalid points\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointField\n\
# This message holds the description of one point entry in the\n\
# PointCloud2 message format.\n\
uint8 INT8    = 1\n\
uint8 UINT8   = 2\n\
uint8 INT16   = 3\n\
uint8 UINT16  = 4\n\
uint8 INT32   = 5\n\
uint8 UINT32  = 6\n\
uint8 FLOAT32 = 7\n\
uint8 FLOAT64 = 8\n\
\n\
string name      # Name of field\n\
uint32 offset    # Offset from start of point struct\n\
uint8  datatype  # Datatype enumeration, see above\n\
uint32 count     # How many elements in the field\n\
";
  }

  static const char* value(const ::hd_map::element_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hd_map::element_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.color);
      stream.next(m.element_type);
      stream.next(m.pointclouds);
      stream.next(m.direction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct element_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hd_map::element_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hd_map::element_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "color: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.color);
    s << indent << "element_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.element_type);
    s << indent << "pointclouds: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.pointclouds);
    s << indent << "direction[]" << std::endl;
    for (size_t i = 0; i < v.direction.size(); ++i)
    {
      s << indent << "  direction[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.direction[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HD_MAP_MESSAGE_ELEMENT_H
