// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SourceInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SourceInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SourceInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SourceInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SourceInfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SourceInfo_2eproto;
namespace source {
class GPSInfo;
class GPSInfoDefaultTypeInternal;
extern GPSInfoDefaultTypeInternal _GPSInfo_default_instance_;
class GPSPoint;
class GPSPointDefaultTypeInternal;
extern GPSPointDefaultTypeInternal _GPSPoint_default_instance_;
class IMUInfo;
class IMUInfoDefaultTypeInternal;
extern IMUInfoDefaultTypeInternal _IMUInfo_default_instance_;
class VideoInfo;
class VideoInfoDefaultTypeInternal;
extern VideoInfoDefaultTypeInternal _VideoInfo_default_instance_;
}  // namespace source
PROTOBUF_NAMESPACE_OPEN
template<> ::source::GPSInfo* Arena::CreateMaybeMessage<::source::GPSInfo>(Arena*);
template<> ::source::GPSPoint* Arena::CreateMaybeMessage<::source::GPSPoint>(Arena*);
template<> ::source::IMUInfo* Arena::CreateMaybeMessage<::source::IMUInfo>(Arena*);
template<> ::source::VideoInfo* Arena::CreateMaybeMessage<::source::VideoInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace source {

// ===================================================================

class GPSPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.GPSPoint) */ {
 public:
  GPSPoint();
  virtual ~GPSPoint();

  GPSPoint(const GPSPoint& from);
  GPSPoint(GPSPoint&& from) noexcept
    : GPSPoint() {
    *this = ::std::move(from);
  }

  inline GPSPoint& operator=(const GPSPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPSPoint& operator=(GPSPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GPSPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPSPoint* internal_default_instance() {
    return reinterpret_cast<const GPSPoint*>(
               &_GPSPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GPSPoint& a, GPSPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(GPSPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GPSPoint* New() const final {
    return CreateMaybeMessage<GPSPoint>(nullptr);
  }

  GPSPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPSPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GPSPoint& from);
  void MergeFrom(const GPSPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPSPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.GPSPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SourceInfo_2eproto);
    return ::descriptor_table_SourceInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeometryFieldNumber = 7,
    kGpstimeFieldNumber = 2,
    kHeadingFieldNumber = 3,
    kIdFieldNumber = 1,
    kSumFieldNumber = 6,
    kSpeedFieldNumber = 4,
    kAccuracyFieldNumber = 5,
  };
  // string geometry = 7;
  void clear_geometry();
  const std::string& geometry() const;
  void set_geometry(const std::string& value);
  void set_geometry(std::string&& value);
  void set_geometry(const char* value);
  void set_geometry(const char* value, size_t size);
  std::string* mutable_geometry();
  std::string* release_geometry();
  void set_allocated_geometry(std::string* geometry);
  private:
  const std::string& _internal_geometry() const;
  void _internal_set_geometry(const std::string& value);
  std::string* _internal_mutable_geometry();
  public:

  // int64 gpstime = 2;
  void clear_gpstime();
  ::PROTOBUF_NAMESPACE_ID::int64 gpstime() const;
  void set_gpstime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // double heading = 3;
  void clear_heading();
  double heading() const;
  void set_heading(double value);

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 sum = 6;
  void clear_sum();
  ::PROTOBUF_NAMESPACE_ID::int32 sum() const;
  void set_sum(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double speed = 4;
  void clear_speed();
  double speed() const;
  void set_speed(double value);

  // double accuracy = 5;
  void clear_accuracy();
  double accuracy() const;
  void set_accuracy(double value);

  // @@protoc_insertion_point(class_scope:source.GPSPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geometry_;
  ::PROTOBUF_NAMESPACE_ID::int64 gpstime_;
  double heading_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sum_;
  double speed_;
  double accuracy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SourceInfo_2eproto;
};
// -------------------------------------------------------------------

class GPSInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.GPSInfo) */ {
 public:
  GPSInfo();
  virtual ~GPSInfo();

  GPSInfo(const GPSInfo& from);
  GPSInfo(GPSInfo&& from) noexcept
    : GPSInfo() {
    *this = ::std::move(from);
  }

  inline GPSInfo& operator=(const GPSInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPSInfo& operator=(GPSInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GPSInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPSInfo* internal_default_instance() {
    return reinterpret_cast<const GPSInfo*>(
               &_GPSInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GPSInfo& a, GPSInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GPSInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GPSInfo* New() const final {
    return CreateMaybeMessage<GPSInfo>(nullptr);
  }

  GPSInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPSInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GPSInfo& from);
  void MergeFrom(const GPSInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPSInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.GPSInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SourceInfo_2eproto);
    return ::descriptor_table_SourceInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtsFieldNumber = 3,
    kSceneIdFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
    kVersionFieldNumber = 4,
  };
  // repeated .source.GPSPoint pts = 3;
  int pts_size() const;
  void clear_pts();
  ::source::GPSPoint* mutable_pts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::source::GPSPoint >*
      mutable_pts();
  const ::source::GPSPoint& pts(int index) const;
  ::source::GPSPoint* add_pts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::source::GPSPoint >&
      pts() const;

  // string scene_id = 1;
  void clear_scene_id();
  const std::string& scene_id() const;
  void set_scene_id(const std::string& value);
  void set_scene_id(std::string&& value);
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  std::string* mutable_scene_id();
  std::string* release_scene_id();
  void set_allocated_scene_id(std::string* scene_id);
  private:
  const std::string& _internal_scene_id() const;
  void _internal_set_scene_id(const std::string& value);
  std::string* _internal_mutable_scene_id();
  public:

  // string device_id = 2;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string version = 4;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:source.GPSInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::source::GPSPoint > pts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SourceInfo_2eproto;
};
// -------------------------------------------------------------------

class IMUInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.IMUInfo) */ {
 public:
  IMUInfo();
  virtual ~IMUInfo();

  IMUInfo(const IMUInfo& from);
  IMUInfo(IMUInfo&& from) noexcept
    : IMUInfo() {
    *this = ::std::move(from);
  }

  inline IMUInfo& operator=(const IMUInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUInfo& operator=(IMUInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IMUInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUInfo* internal_default_instance() {
    return reinterpret_cast<const IMUInfo*>(
               &_IMUInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IMUInfo& a, IMUInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMUInfo* New() const final {
    return CreateMaybeMessage<IMUInfo>(nullptr);
  }

  IMUInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMUInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IMUInfo& from);
  void MergeFrom(const IMUInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.IMUInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SourceInfo_2eproto);
    return ::descriptor_table_SourceInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneIdFieldNumber = 2,
    kDeviceFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string scene_id = 2;
  void clear_scene_id();
  const std::string& scene_id() const;
  void set_scene_id(const std::string& value);
  void set_scene_id(std::string&& value);
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  std::string* mutable_scene_id();
  std::string* release_scene_id();
  void set_allocated_scene_id(std::string* scene_id);
  private:
  const std::string& _internal_scene_id() const;
  void _internal_set_scene_id(const std::string& value);
  std::string* _internal_mutable_scene_id();
  public:

  // string device = 3;
  void clear_device();
  const std::string& device() const;
  void set_device(const std::string& value);
  void set_device(std::string&& value);
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  std::string* mutable_device();
  std::string* release_device();
  void set_allocated_device(std::string* device);
  private:
  const std::string& _internal_device() const;
  void _internal_set_device(const std::string& value);
  std::string* _internal_mutable_device();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:source.IMUInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SourceInfo_2eproto;
};
// -------------------------------------------------------------------

class VideoInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:source.VideoInfo) */ {
 public:
  VideoInfo();
  virtual ~VideoInfo();

  VideoInfo(const VideoInfo& from);
  VideoInfo(VideoInfo&& from) noexcept
    : VideoInfo() {
    *this = ::std::move(from);
  }

  inline VideoInfo& operator=(const VideoInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoInfo& operator=(VideoInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoInfo* internal_default_instance() {
    return reinterpret_cast<const VideoInfo*>(
               &_VideoInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VideoInfo& a, VideoInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoInfo* New() const final {
    return CreateMaybeMessage<VideoInfo>(nullptr);
  }

  VideoInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoInfo& from);
  void MergeFrom(const VideoInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "source.VideoInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SourceInfo_2eproto);
    return ::descriptor_table_SourceInfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneIdFieldNumber = 2,
    kDeviceFieldNumber = 3,
    kPathFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // string scene_id = 2;
  void clear_scene_id();
  const std::string& scene_id() const;
  void set_scene_id(const std::string& value);
  void set_scene_id(std::string&& value);
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  std::string* mutable_scene_id();
  std::string* release_scene_id();
  void set_allocated_scene_id(std::string* scene_id);
  private:
  const std::string& _internal_scene_id() const;
  void _internal_set_scene_id(const std::string& value);
  std::string* _internal_mutable_scene_id();
  public:

  // string device = 3;
  void clear_device();
  const std::string& device() const;
  void set_device(const std::string& value);
  void set_device(std::string&& value);
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  std::string* mutable_device();
  std::string* release_device();
  void set_allocated_device(std::string* device);
  private:
  const std::string& _internal_device() const;
  void _internal_set_device(const std::string& value);
  std::string* _internal_mutable_device();
  public:

  // string path = 4;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:source.VideoInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SourceInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GPSPoint

// int32 id = 1;
inline void GPSPoint::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GPSPoint::id() const {
  // @@protoc_insertion_point(field_get:source.GPSPoint.id)
  return id_;
}
inline void GPSPoint::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:source.GPSPoint.id)
}

// int64 gpstime = 2;
inline void GPSPoint::clear_gpstime() {
  gpstime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GPSPoint::gpstime() const {
  // @@protoc_insertion_point(field_get:source.GPSPoint.gpstime)
  return gpstime_;
}
inline void GPSPoint::set_gpstime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gpstime_ = value;
  // @@protoc_insertion_point(field_set:source.GPSPoint.gpstime)
}

// double heading = 3;
inline void GPSPoint::clear_heading() {
  heading_ = 0;
}
inline double GPSPoint::heading() const {
  // @@protoc_insertion_point(field_get:source.GPSPoint.heading)
  return heading_;
}
inline void GPSPoint::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:source.GPSPoint.heading)
}

// double speed = 4;
inline void GPSPoint::clear_speed() {
  speed_ = 0;
}
inline double GPSPoint::speed() const {
  // @@protoc_insertion_point(field_get:source.GPSPoint.speed)
  return speed_;
}
inline void GPSPoint::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:source.GPSPoint.speed)
}

// double accuracy = 5;
inline void GPSPoint::clear_accuracy() {
  accuracy_ = 0;
}
inline double GPSPoint::accuracy() const {
  // @@protoc_insertion_point(field_get:source.GPSPoint.accuracy)
  return accuracy_;
}
inline void GPSPoint::set_accuracy(double value) {
  
  accuracy_ = value;
  // @@protoc_insertion_point(field_set:source.GPSPoint.accuracy)
}

// int32 sum = 6;
inline void GPSPoint::clear_sum() {
  sum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GPSPoint::sum() const {
  // @@protoc_insertion_point(field_get:source.GPSPoint.sum)
  return sum_;
}
inline void GPSPoint::set_sum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sum_ = value;
  // @@protoc_insertion_point(field_set:source.GPSPoint.sum)
}

// string geometry = 7;
inline void GPSPoint::clear_geometry() {
  geometry_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GPSPoint::geometry() const {
  // @@protoc_insertion_point(field_get:source.GPSPoint.geometry)
  return _internal_geometry();
}
inline void GPSPoint::set_geometry(const std::string& value) {
  _internal_set_geometry(value);
  // @@protoc_insertion_point(field_set:source.GPSPoint.geometry)
}
inline std::string* GPSPoint::mutable_geometry() {
  // @@protoc_insertion_point(field_mutable:source.GPSPoint.geometry)
  return _internal_mutable_geometry();
}
inline const std::string& GPSPoint::_internal_geometry() const {
  return geometry_.GetNoArena();
}
inline void GPSPoint::_internal_set_geometry(const std::string& value) {
  
  geometry_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GPSPoint::set_geometry(std::string&& value) {
  
  geometry_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:source.GPSPoint.geometry)
}
inline void GPSPoint::set_geometry(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geometry_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:source.GPSPoint.geometry)
}
inline void GPSPoint::set_geometry(const char* value, size_t size) {
  
  geometry_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:source.GPSPoint.geometry)
}
inline std::string* GPSPoint::_internal_mutable_geometry() {
  
  return geometry_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GPSPoint::release_geometry() {
  // @@protoc_insertion_point(field_release:source.GPSPoint.geometry)
  
  return geometry_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GPSPoint::set_allocated_geometry(std::string* geometry) {
  if (geometry != nullptr) {
    
  } else {
    
  }
  geometry_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geometry);
  // @@protoc_insertion_point(field_set_allocated:source.GPSPoint.geometry)
}

// -------------------------------------------------------------------

// GPSInfo

// string scene_id = 1;
inline void GPSInfo::clear_scene_id() {
  scene_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GPSInfo::scene_id() const {
  // @@protoc_insertion_point(field_get:source.GPSInfo.scene_id)
  return _internal_scene_id();
}
inline void GPSInfo::set_scene_id(const std::string& value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:source.GPSInfo.scene_id)
}
inline std::string* GPSInfo::mutable_scene_id() {
  // @@protoc_insertion_point(field_mutable:source.GPSInfo.scene_id)
  return _internal_mutable_scene_id();
}
inline const std::string& GPSInfo::_internal_scene_id() const {
  return scene_id_.GetNoArena();
}
inline void GPSInfo::_internal_set_scene_id(const std::string& value) {
  
  scene_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GPSInfo::set_scene_id(std::string&& value) {
  
  scene_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:source.GPSInfo.scene_id)
}
inline void GPSInfo::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scene_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:source.GPSInfo.scene_id)
}
inline void GPSInfo::set_scene_id(const char* value, size_t size) {
  
  scene_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:source.GPSInfo.scene_id)
}
inline std::string* GPSInfo::_internal_mutable_scene_id() {
  
  return scene_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GPSInfo::release_scene_id() {
  // @@protoc_insertion_point(field_release:source.GPSInfo.scene_id)
  
  return scene_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GPSInfo::set_allocated_scene_id(std::string* scene_id) {
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene_id);
  // @@protoc_insertion_point(field_set_allocated:source.GPSInfo.scene_id)
}

// string device_id = 2;
inline void GPSInfo::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GPSInfo::device_id() const {
  // @@protoc_insertion_point(field_get:source.GPSInfo.device_id)
  return _internal_device_id();
}
inline void GPSInfo::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:source.GPSInfo.device_id)
}
inline std::string* GPSInfo::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:source.GPSInfo.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& GPSInfo::_internal_device_id() const {
  return device_id_.GetNoArena();
}
inline void GPSInfo::_internal_set_device_id(const std::string& value) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GPSInfo::set_device_id(std::string&& value) {
  
  device_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:source.GPSInfo.device_id)
}
inline void GPSInfo::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:source.GPSInfo.device_id)
}
inline void GPSInfo::set_device_id(const char* value, size_t size) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:source.GPSInfo.device_id)
}
inline std::string* GPSInfo::_internal_mutable_device_id() {
  
  return device_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GPSInfo::release_device_id() {
  // @@protoc_insertion_point(field_release:source.GPSInfo.device_id)
  
  return device_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GPSInfo::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:source.GPSInfo.device_id)
}

// repeated .source.GPSPoint pts = 3;
inline int GPSInfo::pts_size() const {
  return pts_.size();
}
inline void GPSInfo::clear_pts() {
  pts_.Clear();
}
inline ::source::GPSPoint* GPSInfo::mutable_pts(int index) {
  // @@protoc_insertion_point(field_mutable:source.GPSInfo.pts)
  return pts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::source::GPSPoint >*
GPSInfo::mutable_pts() {
  // @@protoc_insertion_point(field_mutable_list:source.GPSInfo.pts)
  return &pts_;
}
inline const ::source::GPSPoint& GPSInfo::pts(int index) const {
  // @@protoc_insertion_point(field_get:source.GPSInfo.pts)
  return pts_.Get(index);
}
inline ::source::GPSPoint* GPSInfo::add_pts() {
  // @@protoc_insertion_point(field_add:source.GPSInfo.pts)
  return pts_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::source::GPSPoint >&
GPSInfo::pts() const {
  // @@protoc_insertion_point(field_list:source.GPSInfo.pts)
  return pts_;
}

// string version = 4;
inline void GPSInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GPSInfo::version() const {
  // @@protoc_insertion_point(field_get:source.GPSInfo.version)
  return _internal_version();
}
inline void GPSInfo::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:source.GPSInfo.version)
}
inline std::string* GPSInfo::mutable_version() {
  // @@protoc_insertion_point(field_mutable:source.GPSInfo.version)
  return _internal_mutable_version();
}
inline const std::string& GPSInfo::_internal_version() const {
  return version_.GetNoArena();
}
inline void GPSInfo::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GPSInfo::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:source.GPSInfo.version)
}
inline void GPSInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:source.GPSInfo.version)
}
inline void GPSInfo::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:source.GPSInfo.version)
}
inline std::string* GPSInfo::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GPSInfo::release_version() {
  // @@protoc_insertion_point(field_release:source.GPSInfo.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GPSInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:source.GPSInfo.version)
}

// -------------------------------------------------------------------

// IMUInfo

// int32 id = 1;
inline void IMUInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IMUInfo::id() const {
  // @@protoc_insertion_point(field_get:source.IMUInfo.id)
  return id_;
}
inline void IMUInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:source.IMUInfo.id)
}

// string scene_id = 2;
inline void IMUInfo::clear_scene_id() {
  scene_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IMUInfo::scene_id() const {
  // @@protoc_insertion_point(field_get:source.IMUInfo.scene_id)
  return _internal_scene_id();
}
inline void IMUInfo::set_scene_id(const std::string& value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:source.IMUInfo.scene_id)
}
inline std::string* IMUInfo::mutable_scene_id() {
  // @@protoc_insertion_point(field_mutable:source.IMUInfo.scene_id)
  return _internal_mutable_scene_id();
}
inline const std::string& IMUInfo::_internal_scene_id() const {
  return scene_id_.GetNoArena();
}
inline void IMUInfo::_internal_set_scene_id(const std::string& value) {
  
  scene_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IMUInfo::set_scene_id(std::string&& value) {
  
  scene_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:source.IMUInfo.scene_id)
}
inline void IMUInfo::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scene_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:source.IMUInfo.scene_id)
}
inline void IMUInfo::set_scene_id(const char* value, size_t size) {
  
  scene_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:source.IMUInfo.scene_id)
}
inline std::string* IMUInfo::_internal_mutable_scene_id() {
  
  return scene_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IMUInfo::release_scene_id() {
  // @@protoc_insertion_point(field_release:source.IMUInfo.scene_id)
  
  return scene_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IMUInfo::set_allocated_scene_id(std::string* scene_id) {
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene_id);
  // @@protoc_insertion_point(field_set_allocated:source.IMUInfo.scene_id)
}

// string device = 3;
inline void IMUInfo::clear_device() {
  device_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IMUInfo::device() const {
  // @@protoc_insertion_point(field_get:source.IMUInfo.device)
  return _internal_device();
}
inline void IMUInfo::set_device(const std::string& value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:source.IMUInfo.device)
}
inline std::string* IMUInfo::mutable_device() {
  // @@protoc_insertion_point(field_mutable:source.IMUInfo.device)
  return _internal_mutable_device();
}
inline const std::string& IMUInfo::_internal_device() const {
  return device_.GetNoArena();
}
inline void IMUInfo::_internal_set_device(const std::string& value) {
  
  device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IMUInfo::set_device(std::string&& value) {
  
  device_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:source.IMUInfo.device)
}
inline void IMUInfo::set_device(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:source.IMUInfo.device)
}
inline void IMUInfo::set_device(const char* value, size_t size) {
  
  device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:source.IMUInfo.device)
}
inline std::string* IMUInfo::_internal_mutable_device() {
  
  return device_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IMUInfo::release_device() {
  // @@protoc_insertion_point(field_release:source.IMUInfo.device)
  
  return device_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IMUInfo::set_allocated_device(std::string* device) {
  if (device != nullptr) {
    
  } else {
    
  }
  device_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:source.IMUInfo.device)
}

// -------------------------------------------------------------------

// VideoInfo

// int32 id = 1;
inline void VideoInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoInfo::id() const {
  // @@protoc_insertion_point(field_get:source.VideoInfo.id)
  return id_;
}
inline void VideoInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:source.VideoInfo.id)
}

// string scene_id = 2;
inline void VideoInfo::clear_scene_id() {
  scene_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VideoInfo::scene_id() const {
  // @@protoc_insertion_point(field_get:source.VideoInfo.scene_id)
  return _internal_scene_id();
}
inline void VideoInfo::set_scene_id(const std::string& value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:source.VideoInfo.scene_id)
}
inline std::string* VideoInfo::mutable_scene_id() {
  // @@protoc_insertion_point(field_mutable:source.VideoInfo.scene_id)
  return _internal_mutable_scene_id();
}
inline const std::string& VideoInfo::_internal_scene_id() const {
  return scene_id_.GetNoArena();
}
inline void VideoInfo::_internal_set_scene_id(const std::string& value) {
  
  scene_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VideoInfo::set_scene_id(std::string&& value) {
  
  scene_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:source.VideoInfo.scene_id)
}
inline void VideoInfo::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scene_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:source.VideoInfo.scene_id)
}
inline void VideoInfo::set_scene_id(const char* value, size_t size) {
  
  scene_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:source.VideoInfo.scene_id)
}
inline std::string* VideoInfo::_internal_mutable_scene_id() {
  
  return scene_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VideoInfo::release_scene_id() {
  // @@protoc_insertion_point(field_release:source.VideoInfo.scene_id)
  
  return scene_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_scene_id(std::string* scene_id) {
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene_id);
  // @@protoc_insertion_point(field_set_allocated:source.VideoInfo.scene_id)
}

// string device = 3;
inline void VideoInfo::clear_device() {
  device_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VideoInfo::device() const {
  // @@protoc_insertion_point(field_get:source.VideoInfo.device)
  return _internal_device();
}
inline void VideoInfo::set_device(const std::string& value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:source.VideoInfo.device)
}
inline std::string* VideoInfo::mutable_device() {
  // @@protoc_insertion_point(field_mutable:source.VideoInfo.device)
  return _internal_mutable_device();
}
inline const std::string& VideoInfo::_internal_device() const {
  return device_.GetNoArena();
}
inline void VideoInfo::_internal_set_device(const std::string& value) {
  
  device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VideoInfo::set_device(std::string&& value) {
  
  device_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:source.VideoInfo.device)
}
inline void VideoInfo::set_device(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:source.VideoInfo.device)
}
inline void VideoInfo::set_device(const char* value, size_t size) {
  
  device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:source.VideoInfo.device)
}
inline std::string* VideoInfo::_internal_mutable_device() {
  
  return device_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VideoInfo::release_device() {
  // @@protoc_insertion_point(field_release:source.VideoInfo.device)
  
  return device_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_device(std::string* device) {
  if (device != nullptr) {
    
  } else {
    
  }
  device_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:source.VideoInfo.device)
}

// string path = 4;
inline void VideoInfo::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VideoInfo::path() const {
  // @@protoc_insertion_point(field_get:source.VideoInfo.path)
  return _internal_path();
}
inline void VideoInfo::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:source.VideoInfo.path)
}
inline std::string* VideoInfo::mutable_path() {
  // @@protoc_insertion_point(field_mutable:source.VideoInfo.path)
  return _internal_mutable_path();
}
inline const std::string& VideoInfo::_internal_path() const {
  return path_.GetNoArena();
}
inline void VideoInfo::_internal_set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VideoInfo::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:source.VideoInfo.path)
}
inline void VideoInfo::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:source.VideoInfo.path)
}
inline void VideoInfo::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:source.VideoInfo.path)
}
inline std::string* VideoInfo::_internal_mutable_path() {
  
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VideoInfo::release_path() {
  // @@protoc_insertion_point(field_release:source.VideoInfo.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:source.VideoInfo.path)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace source

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SourceInfo_2eproto
