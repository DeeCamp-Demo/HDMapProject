// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TrafficLight.proto

#include "TrafficLight.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_TrafficLight_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Light_TrafficLight_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TrafficLight_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficLight_TrafficLight_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TrafficLight_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficLightPerFrame_TrafficLight_2eproto;
namespace hdmap {
class LightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Light> _instance;
} _Light_default_instance_;
class TrafficLightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficLight> _instance;
} _TrafficLight_default_instance_;
class TrafficLightPerFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficLightPerFrame> _instance;
} _TrafficLightPerFrame_default_instance_;
class TrafficLightPerCaptureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficLightPerCapture> _instance;
} _TrafficLightPerCapture_default_instance_;
}  // namespace hdmap
static void InitDefaultsscc_info_Light_TrafficLight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hdmap::_Light_default_instance_;
    new (ptr) ::hdmap::Light();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hdmap::Light::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Light_TrafficLight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Light_TrafficLight_2eproto}, {}};

static void InitDefaultsscc_info_TrafficLight_TrafficLight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hdmap::_TrafficLight_default_instance_;
    new (ptr) ::hdmap::TrafficLight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hdmap::TrafficLight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficLight_TrafficLight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrafficLight_TrafficLight_2eproto}, {
      &scc_info_Light_TrafficLight_2eproto.base,}};

static void InitDefaultsscc_info_TrafficLightPerCapture_TrafficLight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hdmap::_TrafficLightPerCapture_default_instance_;
    new (ptr) ::hdmap::TrafficLightPerCapture();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hdmap::TrafficLightPerCapture::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficLightPerCapture_TrafficLight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrafficLightPerCapture_TrafficLight_2eproto}, {
      &scc_info_TrafficLightPerFrame_TrafficLight_2eproto.base,}};

static void InitDefaultsscc_info_TrafficLightPerFrame_TrafficLight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hdmap::_TrafficLightPerFrame_default_instance_;
    new (ptr) ::hdmap::TrafficLightPerFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hdmap::TrafficLightPerFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficLightPerFrame_TrafficLight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrafficLightPerFrame_TrafficLight_2eproto}, {
      &scc_info_TrafficLight_TrafficLight_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TrafficLight_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_TrafficLight_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TrafficLight_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TrafficLight_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hdmap::Light, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hdmap::Light, id_),
  PROTOBUF_FIELD_OFFSET(::hdmap::Light, geometry_),
  PROTOBUF_FIELD_OFFSET(::hdmap::Light, direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hdmap::TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hdmap::TrafficLight, id_),
  PROTOBUF_FIELD_OFFSET(::hdmap::TrafficLight, geometry_),
  PROTOBUF_FIELD_OFFSET(::hdmap::TrafficLight, motor_type_),
  PROTOBUF_FIELD_OFFSET(::hdmap::TrafficLight, lights_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hdmap::TrafficLightPerFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hdmap::TrafficLightPerFrame, frame_id_),
  PROTOBUF_FIELD_OFFSET(::hdmap::TrafficLightPerFrame, traffic_lights_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hdmap::TrafficLightPerCapture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hdmap::TrafficLightPerCapture, scene_id_),
  PROTOBUF_FIELD_OFFSET(::hdmap::TrafficLightPerCapture, traffic_light_frames_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::hdmap::Light)},
  { 8, -1, sizeof(::hdmap::TrafficLight)},
  { 17, -1, sizeof(::hdmap::TrafficLightPerFrame)},
  { 24, -1, sizeof(::hdmap::TrafficLightPerCapture)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hdmap::_Light_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hdmap::_TrafficLight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hdmap::_TrafficLightPerFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hdmap::_TrafficLightPerCapture_default_instance_),
};

const char descriptor_table_protodef_TrafficLight_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022TrafficLight.proto\022\005hdmap\"8\n\005Light\022\n\n\002"
  "id\030\001 \001(\005\022\020\n\010geometry\030\002 \001(\t\022\021\n\tdirection\030"
  "\003 \001(\005\"^\n\014TrafficLight\022\n\n\002id\030\001 \001(\005\022\020\n\010geo"
  "metry\030\002 \001(\t\022\022\n\nmotor_type\030\003 \001(\005\022\034\n\006light"
  "s\030\004 \003(\0132\014.hdmap.Light\"U\n\024TrafficLightPer"
  "Frame\022\020\n\010frame_id\030\001 \001(\005\022+\n\016traffic_light"
  "s\030\002 \003(\0132\023.hdmap.TrafficLight\"e\n\026TrafficL"
  "ightPerCapture\022\020\n\010scene_id\030\001 \001(\t\0229\n\024traf"
  "fic_light_frames\030\002 \003(\0132\033.hdmap.TrafficLi"
  "ghtPerFrameb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TrafficLight_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_TrafficLight_2eproto_sccs[4] = {
  &scc_info_Light_TrafficLight_2eproto.base,
  &scc_info_TrafficLight_TrafficLight_2eproto.base,
  &scc_info_TrafficLightPerCapture_TrafficLight_2eproto.base,
  &scc_info_TrafficLightPerFrame_TrafficLight_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TrafficLight_2eproto_once;
static bool descriptor_table_TrafficLight_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TrafficLight_2eproto = {
  &descriptor_table_TrafficLight_2eproto_initialized, descriptor_table_protodef_TrafficLight_2eproto, "TrafficLight.proto", 379,
  &descriptor_table_TrafficLight_2eproto_once, descriptor_table_TrafficLight_2eproto_sccs, descriptor_table_TrafficLight_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_TrafficLight_2eproto::offsets,
  file_level_metadata_TrafficLight_2eproto, 4, file_level_enum_descriptors_TrafficLight_2eproto, file_level_service_descriptors_TrafficLight_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_TrafficLight_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_TrafficLight_2eproto), true);
namespace hdmap {

// ===================================================================

void Light::InitAsDefaultInstance() {
}
class Light::_Internal {
 public:
};

Light::Light()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap.Light)
}
Light::Light(const Light& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  geometry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geometry().empty()) {
    geometry_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.geometry_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&id_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:hdmap.Light)
}

void Light::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Light_TrafficLight_2eproto.base);
  geometry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&id_)) + sizeof(direction_));
}

Light::~Light() {
  // @@protoc_insertion_point(destructor:hdmap.Light)
  SharedDtor();
}

void Light::SharedDtor() {
  geometry_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Light::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Light& Light::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Light_TrafficLight_2eproto.base);
  return *internal_default_instance();
}


void Light::Clear() {
// @@protoc_insertion_point(message_clear_start:hdmap.Light)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geometry_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&id_)) + sizeof(direction_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Light::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string geometry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_geometry(), ptr, ctx, "hdmap.Light.geometry");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Light::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap.Light)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string geometry = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->_internal_mutable_geometry()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_geometry().data(), static_cast<int>(this->_internal_geometry().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "hdmap.Light.geometry"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 direction = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap.Light)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap.Light)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* Light::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap.Light)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string geometry = 2;
  if (this->geometry().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geometry().data(), static_cast<int>(this->_internal_geometry().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hdmap.Light.geometry");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_geometry(), target);
  }

  // int32 direction = 3;
  if (this->direction() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap.Light)
  return target;
}

size_t Light::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hdmap.Light)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string geometry = 2;
  if (this->geometry().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geometry());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 direction = 3;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Light::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hdmap.Light)
  GOOGLE_DCHECK_NE(&from, this);
  const Light* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Light>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hdmap.Light)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hdmap.Light)
    MergeFrom(*source);
  }
}

void Light::MergeFrom(const Light& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hdmap.Light)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.geometry().size() > 0) {

    geometry_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.geometry_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
}

void Light::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hdmap.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Light::CopyFrom(const Light& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hdmap.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Light::IsInitialized() const {
  return true;
}

void Light::InternalSwap(Light* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  geometry_.Swap(&other->geometry_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(direction_, other->direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Light::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficLight::InitAsDefaultInstance() {
}
class TrafficLight::_Internal {
 public:
};

TrafficLight::TrafficLight()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap.TrafficLight)
}
TrafficLight::TrafficLight(const TrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      lights_(from.lights_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  geometry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geometry().empty()) {
    geometry_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.geometry_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&motor_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(motor_type_));
  // @@protoc_insertion_point(copy_constructor:hdmap.TrafficLight)
}

void TrafficLight::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficLight_TrafficLight_2eproto.base);
  geometry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&motor_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(motor_type_));
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:hdmap.TrafficLight)
  SharedDtor();
}

void TrafficLight::SharedDtor() {
  geometry_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrafficLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficLight& TrafficLight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficLight_TrafficLight_2eproto.base);
  return *internal_default_instance();
}


void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:hdmap.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lights_.Clear();
  geometry_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&motor_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(motor_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrafficLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string geometry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_geometry(), ptr, ctx, "hdmap.TrafficLight.geometry");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 motor_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          motor_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hdmap.Light lights = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_lights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrafficLight::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap.TrafficLight)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string geometry = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->_internal_mutable_geometry()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_geometry().data(), static_cast<int>(this->_internal_geometry().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "hdmap.TrafficLight.geometry"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 motor_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &motor_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hdmap.Light lights = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_lights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap.TrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap.TrafficLight)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLight::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string geometry = 2;
  if (this->geometry().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geometry().data(), static_cast<int>(this->_internal_geometry().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hdmap.TrafficLight.geometry");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_geometry(), target);
  }

  // int32 motor_type = 3;
  if (this->motor_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->motor_type(), target);
  }

  // repeated .hdmap.Light lights = 4;
  for (auto it = this->lights_.pointer_begin(),
            end = this->lights_.pointer_end(); it < end; ++it) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, **it, target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap.TrafficLight)
  return target;
}

size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hdmap.TrafficLight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hdmap.Light lights = 4;
  total_size += 1UL * this->lights_size();
  for (const auto& msg : this->lights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string geometry = 2;
  if (this->geometry().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geometry());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 motor_type = 3;
  if (this->motor_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->motor_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hdmap.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficLight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hdmap.TrafficLight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hdmap.TrafficLight)
    MergeFrom(*source);
  }
}

void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hdmap.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lights_.MergeFrom(from.lights_);
  if (from.geometry().size() > 0) {

    geometry_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.geometry_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.motor_type() != 0) {
    set_motor_type(from.motor_type());
  }
}

void TrafficLight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hdmap.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hdmap.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  return true;
}

void TrafficLight::InternalSwap(TrafficLight* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  lights_.InternalSwap(&other->lights_);
  geometry_.Swap(&other->geometry_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(motor_type_, other->motor_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLight::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficLightPerFrame::InitAsDefaultInstance() {
}
class TrafficLightPerFrame::_Internal {
 public:
};

TrafficLightPerFrame::TrafficLightPerFrame()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap.TrafficLightPerFrame)
}
TrafficLightPerFrame::TrafficLightPerFrame(const TrafficLightPerFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      traffic_lights_(from.traffic_lights_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_id_ = from.frame_id_;
  // @@protoc_insertion_point(copy_constructor:hdmap.TrafficLightPerFrame)
}

void TrafficLightPerFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficLightPerFrame_TrafficLight_2eproto.base);
  frame_id_ = 0;
}

TrafficLightPerFrame::~TrafficLightPerFrame() {
  // @@protoc_insertion_point(destructor:hdmap.TrafficLightPerFrame)
  SharedDtor();
}

void TrafficLightPerFrame::SharedDtor() {
}

void TrafficLightPerFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficLightPerFrame& TrafficLightPerFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficLightPerFrame_TrafficLight_2eproto.base);
  return *internal_default_instance();
}


void TrafficLightPerFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:hdmap.TrafficLightPerFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traffic_lights_.Clear();
  frame_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrafficLightPerFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hdmap.TrafficLight traffic_lights = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_traffic_lights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrafficLightPerFrame::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap.TrafficLightPerFrame)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 frame_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hdmap.TrafficLight traffic_lights = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_traffic_lights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap.TrafficLightPerFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap.TrafficLightPerFrame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLightPerFrame::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap.TrafficLightPerFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->frame_id(), target);
  }

  // repeated .hdmap.TrafficLight traffic_lights = 2;
  for (auto it = this->traffic_lights_.pointer_begin(),
            end = this->traffic_lights_.pointer_end(); it < end; ++it) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, **it, target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap.TrafficLightPerFrame)
  return target;
}

size_t TrafficLightPerFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hdmap.TrafficLightPerFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hdmap.TrafficLight traffic_lights = 2;
  total_size += 1UL * this->traffic_lights_size();
  for (const auto& msg : this->traffic_lights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->frame_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLightPerFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hdmap.TrafficLightPerFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightPerFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficLightPerFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hdmap.TrafficLightPerFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hdmap.TrafficLightPerFrame)
    MergeFrom(*source);
  }
}

void TrafficLightPerFrame::MergeFrom(const TrafficLightPerFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hdmap.TrafficLightPerFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traffic_lights_.MergeFrom(from.traffic_lights_);
  if (from.frame_id() != 0) {
    set_frame_id(from.frame_id());
  }
}

void TrafficLightPerFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hdmap.TrafficLightPerFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightPerFrame::CopyFrom(const TrafficLightPerFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hdmap.TrafficLightPerFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightPerFrame::IsInitialized() const {
  return true;
}

void TrafficLightPerFrame::InternalSwap(TrafficLightPerFrame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  traffic_lights_.InternalSwap(&other->traffic_lights_);
  swap(frame_id_, other->frame_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLightPerFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficLightPerCapture::InitAsDefaultInstance() {
}
class TrafficLightPerCapture::_Internal {
 public:
};

TrafficLightPerCapture::TrafficLightPerCapture()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap.TrafficLightPerCapture)
}
TrafficLightPerCapture::TrafficLightPerCapture(const TrafficLightPerCapture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      traffic_light_frames_(from.traffic_light_frames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scene_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scene_id().empty()) {
    scene_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scene_id_);
  }
  // @@protoc_insertion_point(copy_constructor:hdmap.TrafficLightPerCapture)
}

void TrafficLightPerCapture::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficLightPerCapture_TrafficLight_2eproto.base);
  scene_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TrafficLightPerCapture::~TrafficLightPerCapture() {
  // @@protoc_insertion_point(destructor:hdmap.TrafficLightPerCapture)
  SharedDtor();
}

void TrafficLightPerCapture::SharedDtor() {
  scene_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrafficLightPerCapture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficLightPerCapture& TrafficLightPerCapture::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficLightPerCapture_TrafficLight_2eproto.base);
  return *internal_default_instance();
}


void TrafficLightPerCapture::Clear() {
// @@protoc_insertion_point(message_clear_start:hdmap.TrafficLightPerCapture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traffic_light_frames_.Clear();
  scene_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrafficLightPerCapture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_scene_id(), ptr, ctx, "hdmap.TrafficLightPerCapture.scene_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hdmap.TrafficLightPerFrame traffic_light_frames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_traffic_light_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrafficLightPerCapture::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap.TrafficLightPerCapture)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string scene_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->_internal_mutable_scene_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_scene_id().data(), static_cast<int>(this->_internal_scene_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "hdmap.TrafficLightPerCapture.scene_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hdmap.TrafficLightPerFrame traffic_light_frames = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_traffic_light_frames()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap.TrafficLightPerCapture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap.TrafficLightPerCapture)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLightPerCapture::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap.TrafficLightPerCapture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string scene_id = 1;
  if (this->scene_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scene_id().data(), static_cast<int>(this->_internal_scene_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hdmap.TrafficLightPerCapture.scene_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_scene_id(), target);
  }

  // repeated .hdmap.TrafficLightPerFrame traffic_light_frames = 2;
  for (auto it = this->traffic_light_frames_.pointer_begin(),
            end = this->traffic_light_frames_.pointer_end(); it < end; ++it) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, **it, target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap.TrafficLightPerCapture)
  return target;
}

size_t TrafficLightPerCapture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hdmap.TrafficLightPerCapture)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hdmap.TrafficLightPerFrame traffic_light_frames = 2;
  total_size += 1UL * this->traffic_light_frames_size();
  for (const auto& msg : this->traffic_light_frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string scene_id = 1;
  if (this->scene_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scene_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLightPerCapture::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hdmap.TrafficLightPerCapture)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightPerCapture* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficLightPerCapture>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hdmap.TrafficLightPerCapture)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hdmap.TrafficLightPerCapture)
    MergeFrom(*source);
  }
}

void TrafficLightPerCapture::MergeFrom(const TrafficLightPerCapture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hdmap.TrafficLightPerCapture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traffic_light_frames_.MergeFrom(from.traffic_light_frames_);
  if (from.scene_id().size() > 0) {

    scene_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scene_id_);
  }
}

void TrafficLightPerCapture::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hdmap.TrafficLightPerCapture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightPerCapture::CopyFrom(const TrafficLightPerCapture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hdmap.TrafficLightPerCapture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightPerCapture::IsInitialized() const {
  return true;
}

void TrafficLightPerCapture::InternalSwap(TrafficLightPerCapture* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  traffic_light_frames_.InternalSwap(&other->traffic_light_frames_);
  scene_id_.Swap(&other->scene_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLightPerCapture::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hdmap::Light* Arena::CreateMaybeMessage< ::hdmap::Light >(Arena* arena) {
  return Arena::CreateInternal< ::hdmap::Light >(arena);
}
template<> PROTOBUF_NOINLINE ::hdmap::TrafficLight* Arena::CreateMaybeMessage< ::hdmap::TrafficLight >(Arena* arena) {
  return Arena::CreateInternal< ::hdmap::TrafficLight >(arena);
}
template<> PROTOBUF_NOINLINE ::hdmap::TrafficLightPerFrame* Arena::CreateMaybeMessage< ::hdmap::TrafficLightPerFrame >(Arena* arena) {
  return Arena::CreateInternal< ::hdmap::TrafficLightPerFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::hdmap::TrafficLightPerCapture* Arena::CreateMaybeMessage< ::hdmap::TrafficLightPerCapture >(Arena* arena) {
  return Arena::CreateInternal< ::hdmap::TrafficLightPerCapture >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
