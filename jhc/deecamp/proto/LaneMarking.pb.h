// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LaneMarking.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LaneMarking_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LaneMarking_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LaneMarking_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_LaneMarking_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LaneMarking_2eproto;
namespace hdmap {
class LaneMarking;
class LaneMarkingDefaultTypeInternal;
extern LaneMarkingDefaultTypeInternal _LaneMarking_default_instance_;
class LaneMarkingPerCapture;
class LaneMarkingPerCaptureDefaultTypeInternal;
extern LaneMarkingPerCaptureDefaultTypeInternal _LaneMarkingPerCapture_default_instance_;
class LaneMarkingPerFrame;
class LaneMarkingPerFrameDefaultTypeInternal;
extern LaneMarkingPerFrameDefaultTypeInternal _LaneMarkingPerFrame_default_instance_;
}  // namespace hdmap
PROTOBUF_NAMESPACE_OPEN
template<> ::hdmap::LaneMarking* Arena::CreateMaybeMessage<::hdmap::LaneMarking>(Arena*);
template<> ::hdmap::LaneMarkingPerCapture* Arena::CreateMaybeMessage<::hdmap::LaneMarkingPerCapture>(Arena*);
template<> ::hdmap::LaneMarkingPerFrame* Arena::CreateMaybeMessage<::hdmap::LaneMarkingPerFrame>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hdmap {

// ===================================================================

class LaneMarking :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hdmap.LaneMarking) */ {
 public:
  LaneMarking();
  virtual ~LaneMarking();

  LaneMarking(const LaneMarking& from);
  LaneMarking(LaneMarking&& from) noexcept
    : LaneMarking() {
    *this = ::std::move(from);
  }

  inline LaneMarking& operator=(const LaneMarking& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneMarking& operator=(LaneMarking&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneMarking& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneMarking* internal_default_instance() {
    return reinterpret_cast<const LaneMarking*>(
               &_LaneMarking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LaneMarking& a, LaneMarking& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneMarking* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneMarking* New() const final {
    return CreateMaybeMessage<LaneMarking>(nullptr);
  }

  LaneMarking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneMarking>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneMarking& from);
  void MergeFrom(const LaneMarking& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneMarking* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hdmap.LaneMarking";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LaneMarking_2eproto);
    return ::descriptor_table_LaneMarking_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeometryFieldNumber = 2,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 3,
  };
  // string geometry = 2;
  void clear_geometry();
  const std::string& geometry() const;
  void set_geometry(const std::string& value);
  void set_geometry(std::string&& value);
  void set_geometry(const char* value);
  void set_geometry(const char* value, size_t size);
  std::string* mutable_geometry();
  std::string* release_geometry();
  void set_allocated_geometry(std::string* geometry);
  private:
  const std::string& _internal_geometry() const;
  void _internal_set_geometry(const std::string& value);
  std::string* _internal_mutable_geometry();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:hdmap.LaneMarking)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geometry_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LaneMarking_2eproto;
};
// -------------------------------------------------------------------

class LaneMarkingPerFrame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hdmap.LaneMarkingPerFrame) */ {
 public:
  LaneMarkingPerFrame();
  virtual ~LaneMarkingPerFrame();

  LaneMarkingPerFrame(const LaneMarkingPerFrame& from);
  LaneMarkingPerFrame(LaneMarkingPerFrame&& from) noexcept
    : LaneMarkingPerFrame() {
    *this = ::std::move(from);
  }

  inline LaneMarkingPerFrame& operator=(const LaneMarkingPerFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneMarkingPerFrame& operator=(LaneMarkingPerFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneMarkingPerFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneMarkingPerFrame* internal_default_instance() {
    return reinterpret_cast<const LaneMarkingPerFrame*>(
               &_LaneMarkingPerFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LaneMarkingPerFrame& a, LaneMarkingPerFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneMarkingPerFrame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneMarkingPerFrame* New() const final {
    return CreateMaybeMessage<LaneMarkingPerFrame>(nullptr);
  }

  LaneMarkingPerFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneMarkingPerFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneMarkingPerFrame& from);
  void MergeFrom(const LaneMarkingPerFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneMarkingPerFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hdmap.LaneMarkingPerFrame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LaneMarking_2eproto);
    return ::descriptor_table_LaneMarking_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneMarkingsFieldNumber = 2,
    kFrameIdFieldNumber = 1,
  };
  // repeated .hdmap.LaneMarking lane_markings = 2;
  int lane_markings_size() const;
  void clear_lane_markings();
  ::hdmap::LaneMarking* mutable_lane_markings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::LaneMarking >*
      mutable_lane_markings();
  const ::hdmap::LaneMarking& lane_markings(int index) const;
  ::hdmap::LaneMarking* add_lane_markings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::LaneMarking >&
      lane_markings() const;

  // int32 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:hdmap.LaneMarkingPerFrame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::LaneMarking > lane_markings_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LaneMarking_2eproto;
};
// -------------------------------------------------------------------

class LaneMarkingPerCapture :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hdmap.LaneMarkingPerCapture) */ {
 public:
  LaneMarkingPerCapture();
  virtual ~LaneMarkingPerCapture();

  LaneMarkingPerCapture(const LaneMarkingPerCapture& from);
  LaneMarkingPerCapture(LaneMarkingPerCapture&& from) noexcept
    : LaneMarkingPerCapture() {
    *this = ::std::move(from);
  }

  inline LaneMarkingPerCapture& operator=(const LaneMarkingPerCapture& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneMarkingPerCapture& operator=(LaneMarkingPerCapture&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneMarkingPerCapture& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneMarkingPerCapture* internal_default_instance() {
    return reinterpret_cast<const LaneMarkingPerCapture*>(
               &_LaneMarkingPerCapture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LaneMarkingPerCapture& a, LaneMarkingPerCapture& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneMarkingPerCapture* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneMarkingPerCapture* New() const final {
    return CreateMaybeMessage<LaneMarkingPerCapture>(nullptr);
  }

  LaneMarkingPerCapture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneMarkingPerCapture>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneMarkingPerCapture& from);
  void MergeFrom(const LaneMarkingPerCapture& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneMarkingPerCapture* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hdmap.LaneMarkingPerCapture";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LaneMarking_2eproto);
    return ::descriptor_table_LaneMarking_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneMarkingFramesFieldNumber = 2,
    kSceneIdFieldNumber = 1,
  };
  // repeated .hdmap.LaneMarkingPerFrame lane_marking_frames = 2;
  int lane_marking_frames_size() const;
  void clear_lane_marking_frames();
  ::hdmap::LaneMarkingPerFrame* mutable_lane_marking_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::LaneMarkingPerFrame >*
      mutable_lane_marking_frames();
  const ::hdmap::LaneMarkingPerFrame& lane_marking_frames(int index) const;
  ::hdmap::LaneMarkingPerFrame* add_lane_marking_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::LaneMarkingPerFrame >&
      lane_marking_frames() const;

  // string scene_id = 1;
  void clear_scene_id();
  const std::string& scene_id() const;
  void set_scene_id(const std::string& value);
  void set_scene_id(std::string&& value);
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  std::string* mutable_scene_id();
  std::string* release_scene_id();
  void set_allocated_scene_id(std::string* scene_id);
  private:
  const std::string& _internal_scene_id() const;
  void _internal_set_scene_id(const std::string& value);
  std::string* _internal_mutable_scene_id();
  public:

  // @@protoc_insertion_point(class_scope:hdmap.LaneMarkingPerCapture)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::LaneMarkingPerFrame > lane_marking_frames_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LaneMarking_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaneMarking

// int32 id = 1;
inline void LaneMarking::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneMarking::id() const {
  // @@protoc_insertion_point(field_get:hdmap.LaneMarking.id)
  return id_;
}
inline void LaneMarking::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:hdmap.LaneMarking.id)
}

// string geometry = 2;
inline void LaneMarking::clear_geometry() {
  geometry_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LaneMarking::geometry() const {
  // @@protoc_insertion_point(field_get:hdmap.LaneMarking.geometry)
  return _internal_geometry();
}
inline void LaneMarking::set_geometry(const std::string& value) {
  _internal_set_geometry(value);
  // @@protoc_insertion_point(field_set:hdmap.LaneMarking.geometry)
}
inline std::string* LaneMarking::mutable_geometry() {
  // @@protoc_insertion_point(field_mutable:hdmap.LaneMarking.geometry)
  return _internal_mutable_geometry();
}
inline const std::string& LaneMarking::_internal_geometry() const {
  return geometry_.GetNoArena();
}
inline void LaneMarking::_internal_set_geometry(const std::string& value) {
  
  geometry_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LaneMarking::set_geometry(std::string&& value) {
  
  geometry_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hdmap.LaneMarking.geometry)
}
inline void LaneMarking::set_geometry(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geometry_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hdmap.LaneMarking.geometry)
}
inline void LaneMarking::set_geometry(const char* value, size_t size) {
  
  geometry_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hdmap.LaneMarking.geometry)
}
inline std::string* LaneMarking::_internal_mutable_geometry() {
  
  return geometry_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LaneMarking::release_geometry() {
  // @@protoc_insertion_point(field_release:hdmap.LaneMarking.geometry)
  
  return geometry_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LaneMarking::set_allocated_geometry(std::string* geometry) {
  if (geometry != nullptr) {
    
  } else {
    
  }
  geometry_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geometry);
  // @@protoc_insertion_point(field_set_allocated:hdmap.LaneMarking.geometry)
}

// int32 type = 3;
inline void LaneMarking::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneMarking::type() const {
  // @@protoc_insertion_point(field_get:hdmap.LaneMarking.type)
  return type_;
}
inline void LaneMarking::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:hdmap.LaneMarking.type)
}

// -------------------------------------------------------------------

// LaneMarkingPerFrame

// int32 frame_id = 1;
inline void LaneMarkingPerFrame::clear_frame_id() {
  frame_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneMarkingPerFrame::frame_id() const {
  // @@protoc_insertion_point(field_get:hdmap.LaneMarkingPerFrame.frame_id)
  return frame_id_;
}
inline void LaneMarkingPerFrame::set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:hdmap.LaneMarkingPerFrame.frame_id)
}

// repeated .hdmap.LaneMarking lane_markings = 2;
inline int LaneMarkingPerFrame::lane_markings_size() const {
  return lane_markings_.size();
}
inline void LaneMarkingPerFrame::clear_lane_markings() {
  lane_markings_.Clear();
}
inline ::hdmap::LaneMarking* LaneMarkingPerFrame::mutable_lane_markings(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap.LaneMarkingPerFrame.lane_markings)
  return lane_markings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::LaneMarking >*
LaneMarkingPerFrame::mutable_lane_markings() {
  // @@protoc_insertion_point(field_mutable_list:hdmap.LaneMarkingPerFrame.lane_markings)
  return &lane_markings_;
}
inline const ::hdmap::LaneMarking& LaneMarkingPerFrame::lane_markings(int index) const {
  // @@protoc_insertion_point(field_get:hdmap.LaneMarkingPerFrame.lane_markings)
  return lane_markings_.Get(index);
}
inline ::hdmap::LaneMarking* LaneMarkingPerFrame::add_lane_markings() {
  // @@protoc_insertion_point(field_add:hdmap.LaneMarkingPerFrame.lane_markings)
  return lane_markings_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::LaneMarking >&
LaneMarkingPerFrame::lane_markings() const {
  // @@protoc_insertion_point(field_list:hdmap.LaneMarkingPerFrame.lane_markings)
  return lane_markings_;
}

// -------------------------------------------------------------------

// LaneMarkingPerCapture

// string scene_id = 1;
inline void LaneMarkingPerCapture::clear_scene_id() {
  scene_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LaneMarkingPerCapture::scene_id() const {
  // @@protoc_insertion_point(field_get:hdmap.LaneMarkingPerCapture.scene_id)
  return _internal_scene_id();
}
inline void LaneMarkingPerCapture::set_scene_id(const std::string& value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:hdmap.LaneMarkingPerCapture.scene_id)
}
inline std::string* LaneMarkingPerCapture::mutable_scene_id() {
  // @@protoc_insertion_point(field_mutable:hdmap.LaneMarkingPerCapture.scene_id)
  return _internal_mutable_scene_id();
}
inline const std::string& LaneMarkingPerCapture::_internal_scene_id() const {
  return scene_id_.GetNoArena();
}
inline void LaneMarkingPerCapture::_internal_set_scene_id(const std::string& value) {
  
  scene_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LaneMarkingPerCapture::set_scene_id(std::string&& value) {
  
  scene_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hdmap.LaneMarkingPerCapture.scene_id)
}
inline void LaneMarkingPerCapture::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scene_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hdmap.LaneMarkingPerCapture.scene_id)
}
inline void LaneMarkingPerCapture::set_scene_id(const char* value, size_t size) {
  
  scene_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hdmap.LaneMarkingPerCapture.scene_id)
}
inline std::string* LaneMarkingPerCapture::_internal_mutable_scene_id() {
  
  return scene_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LaneMarkingPerCapture::release_scene_id() {
  // @@protoc_insertion_point(field_release:hdmap.LaneMarkingPerCapture.scene_id)
  
  return scene_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LaneMarkingPerCapture::set_allocated_scene_id(std::string* scene_id) {
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene_id);
  // @@protoc_insertion_point(field_set_allocated:hdmap.LaneMarkingPerCapture.scene_id)
}

// repeated .hdmap.LaneMarkingPerFrame lane_marking_frames = 2;
inline int LaneMarkingPerCapture::lane_marking_frames_size() const {
  return lane_marking_frames_.size();
}
inline void LaneMarkingPerCapture::clear_lane_marking_frames() {
  lane_marking_frames_.Clear();
}
inline ::hdmap::LaneMarkingPerFrame* LaneMarkingPerCapture::mutable_lane_marking_frames(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap.LaneMarkingPerCapture.lane_marking_frames)
  return lane_marking_frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::LaneMarkingPerFrame >*
LaneMarkingPerCapture::mutable_lane_marking_frames() {
  // @@protoc_insertion_point(field_mutable_list:hdmap.LaneMarkingPerCapture.lane_marking_frames)
  return &lane_marking_frames_;
}
inline const ::hdmap::LaneMarkingPerFrame& LaneMarkingPerCapture::lane_marking_frames(int index) const {
  // @@protoc_insertion_point(field_get:hdmap.LaneMarkingPerCapture.lane_marking_frames)
  return lane_marking_frames_.Get(index);
}
inline ::hdmap::LaneMarkingPerFrame* LaneMarkingPerCapture::add_lane_marking_frames() {
  // @@protoc_insertion_point(field_add:hdmap.LaneMarkingPerCapture.lane_marking_frames)
  return lane_marking_frames_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::LaneMarkingPerFrame >&
LaneMarkingPerCapture::lane_marking_frames() const {
  // @@protoc_insertion_point(field_list:hdmap.LaneMarkingPerCapture.lane_marking_frames)
  return lane_marking_frames_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LaneMarking_2eproto
