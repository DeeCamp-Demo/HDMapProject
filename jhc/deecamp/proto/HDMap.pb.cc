// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HDMap.proto

#include "HDMap.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Divider_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Divider_Divider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LaneMarking_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneMarking_LaneMarking_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TrafficLight_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficLight_TrafficLight_2eproto;
namespace hdmap {
class HDMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HDMap> _instance;
} _HDMap_default_instance_;
}  // namespace hdmap
static void InitDefaultsscc_info_HDMap_HDMap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hdmap::_HDMap_default_instance_;
    new (ptr) ::hdmap::HDMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hdmap::HDMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_HDMap_HDMap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_HDMap_HDMap_2eproto}, {
      &scc_info_Divider_Divider_2eproto.base,
      &scc_info_TrafficLight_TrafficLight_2eproto.base,
      &scc_info_LaneMarking_LaneMarking_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_HDMap_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_HDMap_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_HDMap_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_HDMap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hdmap::HDMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hdmap::HDMap, scene_id_),
  PROTOBUF_FIELD_OFFSET(::hdmap::HDMap, dividers_),
  PROTOBUF_FIELD_OFFSET(::hdmap::HDMap, tafficlights_),
  PROTOBUF_FIELD_OFFSET(::hdmap::HDMap, lanemarkings_),
  PROTOBUF_FIELD_OFFSET(::hdmap::HDMap, version_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::hdmap::HDMap)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hdmap::_HDMap_default_instance_),
};

const char descriptor_table_protodef_HDMap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013HDMap.proto\022\005hdmap\032\rDivider.proto\032\022Tra"
  "fficLight.proto\032\021LaneMarking.proto\"\241\001\n\005H"
  "DMap\022\020\n\010scene_id\030\001 \001(\t\022 \n\010dividers\030\002 \003(\013"
  "2\016.hdmap.Divider\022)\n\014tafficlights\030\003 \003(\0132\023"
  ".hdmap.TrafficLight\022(\n\014lanemarkings\030\004 \003("
  "\0132\022.hdmap.LaneMarking\022\017\n\007version\030\005 \001(\tb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_HDMap_2eproto_deps[3] = {
  &::descriptor_table_Divider_2eproto,
  &::descriptor_table_LaneMarking_2eproto,
  &::descriptor_table_TrafficLight_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_HDMap_2eproto_sccs[1] = {
  &scc_info_HDMap_HDMap_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_HDMap_2eproto_once;
static bool descriptor_table_HDMap_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_HDMap_2eproto = {
  &descriptor_table_HDMap_2eproto_initialized, descriptor_table_protodef_HDMap_2eproto, "HDMap.proto", 246,
  &descriptor_table_HDMap_2eproto_once, descriptor_table_HDMap_2eproto_sccs, descriptor_table_HDMap_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_HDMap_2eproto::offsets,
  file_level_metadata_HDMap_2eproto, 1, file_level_enum_descriptors_HDMap_2eproto, file_level_service_descriptors_HDMap_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_HDMap_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_HDMap_2eproto), true);
namespace hdmap {

// ===================================================================

void HDMap::InitAsDefaultInstance() {
}
class HDMap::_Internal {
 public:
};

void HDMap::clear_dividers() {
  dividers_.Clear();
}
void HDMap::clear_tafficlights() {
  tafficlights_.Clear();
}
void HDMap::clear_lanemarkings() {
  lanemarkings_.Clear();
}
HDMap::HDMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap.HDMap)
}
HDMap::HDMap(const HDMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      dividers_(from.dividers_),
      tafficlights_(from.tafficlights_),
      lanemarkings_(from.lanemarkings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scene_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scene_id().empty()) {
    scene_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scene_id_);
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:hdmap.HDMap)
}

void HDMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HDMap_HDMap_2eproto.base);
  scene_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HDMap::~HDMap() {
  // @@protoc_insertion_point(destructor:hdmap.HDMap)
  SharedDtor();
}

void HDMap::SharedDtor() {
  scene_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HDMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HDMap& HDMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HDMap_HDMap_2eproto.base);
  return *internal_default_instance();
}


void HDMap::Clear() {
// @@protoc_insertion_point(message_clear_start:hdmap.HDMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dividers_.Clear();
  tafficlights_.Clear();
  lanemarkings_.Clear();
  scene_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HDMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_scene_id(), ptr, ctx, "hdmap.HDMap.scene_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hdmap.Divider dividers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_dividers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .hdmap.TrafficLight tafficlights = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tafficlights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .hdmap.LaneMarking lanemarkings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_lanemarkings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_version(), ptr, ctx, "hdmap.HDMap.version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HDMap::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap.HDMap)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string scene_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->_internal_mutable_scene_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_scene_id().data(), static_cast<int>(this->_internal_scene_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "hdmap.HDMap.scene_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hdmap.Divider dividers = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_dividers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hdmap.TrafficLight tafficlights = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tafficlights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hdmap.LaneMarking lanemarkings = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_lanemarkings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->_internal_mutable_version()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "hdmap.HDMap.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap.HDMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap.HDMap)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* HDMap::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap.HDMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string scene_id = 1;
  if (this->scene_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scene_id().data(), static_cast<int>(this->_internal_scene_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hdmap.HDMap.scene_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_scene_id(), target);
  }

  // repeated .hdmap.Divider dividers = 2;
  for (auto it = this->dividers_.pointer_begin(),
            end = this->dividers_.pointer_end(); it < end; ++it) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, **it, target, stream);
  }

  // repeated .hdmap.TrafficLight tafficlights = 3;
  for (auto it = this->tafficlights_.pointer_begin(),
            end = this->tafficlights_.pointer_end(); it < end; ++it) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, **it, target, stream);
  }

  // repeated .hdmap.LaneMarking lanemarkings = 4;
  for (auto it = this->lanemarkings_.pointer_begin(),
            end = this->lanemarkings_.pointer_end(); it < end; ++it) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, **it, target, stream);
  }

  // string version = 5;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hdmap.HDMap.version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap.HDMap)
  return target;
}

size_t HDMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hdmap.HDMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hdmap.Divider dividers = 2;
  total_size += 1UL * this->dividers_size();
  for (const auto& msg : this->dividers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .hdmap.TrafficLight tafficlights = 3;
  total_size += 1UL * this->tafficlights_size();
  for (const auto& msg : this->tafficlights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .hdmap.LaneMarking lanemarkings = 4;
  total_size += 1UL * this->lanemarkings_size();
  for (const auto& msg : this->lanemarkings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string scene_id = 1;
  if (this->scene_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scene_id());
  }

  // string version = 5;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HDMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hdmap.HDMap)
  GOOGLE_DCHECK_NE(&from, this);
  const HDMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HDMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hdmap.HDMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hdmap.HDMap)
    MergeFrom(*source);
  }
}

void HDMap::MergeFrom(const HDMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hdmap.HDMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dividers_.MergeFrom(from.dividers_);
  tafficlights_.MergeFrom(from.tafficlights_);
  lanemarkings_.MergeFrom(from.lanemarkings_);
  if (from.scene_id().size() > 0) {

    scene_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scene_id_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void HDMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hdmap.HDMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HDMap::CopyFrom(const HDMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hdmap.HDMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HDMap::IsInitialized() const {
  return true;
}

void HDMap::InternalSwap(HDMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dividers_.InternalSwap(&other->dividers_);
  tafficlights_.InternalSwap(&other->tafficlights_);
  lanemarkings_.InternalSwap(&other->lanemarkings_);
  scene_id_.Swap(&other->scene_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata HDMap::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hdmap::HDMap* Arena::CreateMaybeMessage< ::hdmap::HDMap >(Arena* arena) {
  return Arena::CreateInternal< ::hdmap::HDMap >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
