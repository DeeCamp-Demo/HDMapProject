// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TrafficLight.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TrafficLight_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TrafficLight_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TrafficLight_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TrafficLight_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TrafficLight_2eproto;
namespace hdmap {
class Light;
class LightDefaultTypeInternal;
extern LightDefaultTypeInternal _Light_default_instance_;
class TrafficLight;
class TrafficLightDefaultTypeInternal;
extern TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;
class TrafficLightPerCapture;
class TrafficLightPerCaptureDefaultTypeInternal;
extern TrafficLightPerCaptureDefaultTypeInternal _TrafficLightPerCapture_default_instance_;
class TrafficLightPerFrame;
class TrafficLightPerFrameDefaultTypeInternal;
extern TrafficLightPerFrameDefaultTypeInternal _TrafficLightPerFrame_default_instance_;
}  // namespace hdmap
PROTOBUF_NAMESPACE_OPEN
template<> ::hdmap::Light* Arena::CreateMaybeMessage<::hdmap::Light>(Arena*);
template<> ::hdmap::TrafficLight* Arena::CreateMaybeMessage<::hdmap::TrafficLight>(Arena*);
template<> ::hdmap::TrafficLightPerCapture* Arena::CreateMaybeMessage<::hdmap::TrafficLightPerCapture>(Arena*);
template<> ::hdmap::TrafficLightPerFrame* Arena::CreateMaybeMessage<::hdmap::TrafficLightPerFrame>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hdmap {

// ===================================================================

class Light :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hdmap.Light) */ {
 public:
  Light();
  virtual ~Light();

  Light(const Light& from);
  Light(Light&& from) noexcept
    : Light() {
    *this = ::std::move(from);
  }

  inline Light& operator=(const Light& from) {
    CopyFrom(from);
    return *this;
  }
  inline Light& operator=(Light&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Light& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Light* internal_default_instance() {
    return reinterpret_cast<const Light*>(
               &_Light_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Light& a, Light& b) {
    a.Swap(&b);
  }
  inline void Swap(Light* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Light* New() const final {
    return CreateMaybeMessage<Light>(nullptr);
  }

  Light* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Light>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Light& from);
  void MergeFrom(const Light& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Light* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hdmap.Light";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TrafficLight_2eproto);
    return ::descriptor_table_TrafficLight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeometryFieldNumber = 2,
    kIdFieldNumber = 1,
    kDirectionFieldNumber = 3,
  };
  // string geometry = 2;
  void clear_geometry();
  const std::string& geometry() const;
  void set_geometry(const std::string& value);
  void set_geometry(std::string&& value);
  void set_geometry(const char* value);
  void set_geometry(const char* value, size_t size);
  std::string* mutable_geometry();
  std::string* release_geometry();
  void set_allocated_geometry(std::string* geometry);
  private:
  const std::string& _internal_geometry() const;
  void _internal_set_geometry(const std::string& value);
  std::string* _internal_mutable_geometry();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 direction = 3;
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::int32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:hdmap.Light)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geometry_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TrafficLight_2eproto;
};
// -------------------------------------------------------------------

class TrafficLight :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hdmap.TrafficLight) */ {
 public:
  TrafficLight();
  virtual ~TrafficLight();

  TrafficLight(const TrafficLight& from);
  TrafficLight(TrafficLight&& from) noexcept
    : TrafficLight() {
    *this = ::std::move(from);
  }

  inline TrafficLight& operator=(const TrafficLight& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLight& operator=(TrafficLight&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficLight& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLight* internal_default_instance() {
    return reinterpret_cast<const TrafficLight*>(
               &_TrafficLight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrafficLight& a, TrafficLight& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficLight* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficLight* New() const final {
    return CreateMaybeMessage<TrafficLight>(nullptr);
  }

  TrafficLight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficLight>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficLight& from);
  void MergeFrom(const TrafficLight& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLight* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hdmap.TrafficLight";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TrafficLight_2eproto);
    return ::descriptor_table_TrafficLight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLightsFieldNumber = 4,
    kGeometryFieldNumber = 2,
    kIdFieldNumber = 1,
    kMotorTypeFieldNumber = 3,
  };
  // repeated .hdmap.Light lights = 4;
  int lights_size() const;
  void clear_lights();
  ::hdmap::Light* mutable_lights(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::Light >*
      mutable_lights();
  const ::hdmap::Light& lights(int index) const;
  ::hdmap::Light* add_lights();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::Light >&
      lights() const;

  // string geometry = 2;
  void clear_geometry();
  const std::string& geometry() const;
  void set_geometry(const std::string& value);
  void set_geometry(std::string&& value);
  void set_geometry(const char* value);
  void set_geometry(const char* value, size_t size);
  std::string* mutable_geometry();
  std::string* release_geometry();
  void set_allocated_geometry(std::string* geometry);
  private:
  const std::string& _internal_geometry() const;
  void _internal_set_geometry(const std::string& value);
  std::string* _internal_mutable_geometry();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 motor_type = 3;
  void clear_motor_type();
  ::PROTOBUF_NAMESPACE_ID::int32 motor_type() const;
  void set_motor_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:hdmap.TrafficLight)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::Light > lights_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geometry_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 motor_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TrafficLight_2eproto;
};
// -------------------------------------------------------------------

class TrafficLightPerFrame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hdmap.TrafficLightPerFrame) */ {
 public:
  TrafficLightPerFrame();
  virtual ~TrafficLightPerFrame();

  TrafficLightPerFrame(const TrafficLightPerFrame& from);
  TrafficLightPerFrame(TrafficLightPerFrame&& from) noexcept
    : TrafficLightPerFrame() {
    *this = ::std::move(from);
  }

  inline TrafficLightPerFrame& operator=(const TrafficLightPerFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLightPerFrame& operator=(TrafficLightPerFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficLightPerFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLightPerFrame* internal_default_instance() {
    return reinterpret_cast<const TrafficLightPerFrame*>(
               &_TrafficLightPerFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrafficLightPerFrame& a, TrafficLightPerFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficLightPerFrame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficLightPerFrame* New() const final {
    return CreateMaybeMessage<TrafficLightPerFrame>(nullptr);
  }

  TrafficLightPerFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficLightPerFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficLightPerFrame& from);
  void MergeFrom(const TrafficLightPerFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLightPerFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hdmap.TrafficLightPerFrame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TrafficLight_2eproto);
    return ::descriptor_table_TrafficLight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrafficLightsFieldNumber = 2,
    kFrameIdFieldNumber = 1,
  };
  // repeated .hdmap.TrafficLight traffic_lights = 2;
  int traffic_lights_size() const;
  void clear_traffic_lights();
  ::hdmap::TrafficLight* mutable_traffic_lights(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::TrafficLight >*
      mutable_traffic_lights();
  const ::hdmap::TrafficLight& traffic_lights(int index) const;
  ::hdmap::TrafficLight* add_traffic_lights();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::TrafficLight >&
      traffic_lights() const;

  // int32 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:hdmap.TrafficLightPerFrame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::TrafficLight > traffic_lights_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TrafficLight_2eproto;
};
// -------------------------------------------------------------------

class TrafficLightPerCapture :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hdmap.TrafficLightPerCapture) */ {
 public:
  TrafficLightPerCapture();
  virtual ~TrafficLightPerCapture();

  TrafficLightPerCapture(const TrafficLightPerCapture& from);
  TrafficLightPerCapture(TrafficLightPerCapture&& from) noexcept
    : TrafficLightPerCapture() {
    *this = ::std::move(from);
  }

  inline TrafficLightPerCapture& operator=(const TrafficLightPerCapture& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLightPerCapture& operator=(TrafficLightPerCapture&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficLightPerCapture& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLightPerCapture* internal_default_instance() {
    return reinterpret_cast<const TrafficLightPerCapture*>(
               &_TrafficLightPerCapture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TrafficLightPerCapture& a, TrafficLightPerCapture& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficLightPerCapture* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficLightPerCapture* New() const final {
    return CreateMaybeMessage<TrafficLightPerCapture>(nullptr);
  }

  TrafficLightPerCapture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficLightPerCapture>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficLightPerCapture& from);
  void MergeFrom(const TrafficLightPerCapture& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLightPerCapture* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hdmap.TrafficLightPerCapture";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TrafficLight_2eproto);
    return ::descriptor_table_TrafficLight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrafficLightFramesFieldNumber = 2,
    kSceneIdFieldNumber = 1,
  };
  // repeated .hdmap.TrafficLightPerFrame traffic_light_frames = 2;
  int traffic_light_frames_size() const;
  void clear_traffic_light_frames();
  ::hdmap::TrafficLightPerFrame* mutable_traffic_light_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::TrafficLightPerFrame >*
      mutable_traffic_light_frames();
  const ::hdmap::TrafficLightPerFrame& traffic_light_frames(int index) const;
  ::hdmap::TrafficLightPerFrame* add_traffic_light_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::TrafficLightPerFrame >&
      traffic_light_frames() const;

  // string scene_id = 1;
  void clear_scene_id();
  const std::string& scene_id() const;
  void set_scene_id(const std::string& value);
  void set_scene_id(std::string&& value);
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  std::string* mutable_scene_id();
  std::string* release_scene_id();
  void set_allocated_scene_id(std::string* scene_id);
  private:
  const std::string& _internal_scene_id() const;
  void _internal_set_scene_id(const std::string& value);
  std::string* _internal_mutable_scene_id();
  public:

  // @@protoc_insertion_point(class_scope:hdmap.TrafficLightPerCapture)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::TrafficLightPerFrame > traffic_light_frames_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TrafficLight_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Light

// int32 id = 1;
inline void Light::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Light::id() const {
  // @@protoc_insertion_point(field_get:hdmap.Light.id)
  return id_;
}
inline void Light::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:hdmap.Light.id)
}

// string geometry = 2;
inline void Light::clear_geometry() {
  geometry_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Light::geometry() const {
  // @@protoc_insertion_point(field_get:hdmap.Light.geometry)
  return _internal_geometry();
}
inline void Light::set_geometry(const std::string& value) {
  _internal_set_geometry(value);
  // @@protoc_insertion_point(field_set:hdmap.Light.geometry)
}
inline std::string* Light::mutable_geometry() {
  // @@protoc_insertion_point(field_mutable:hdmap.Light.geometry)
  return _internal_mutable_geometry();
}
inline const std::string& Light::_internal_geometry() const {
  return geometry_.GetNoArena();
}
inline void Light::_internal_set_geometry(const std::string& value) {
  
  geometry_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Light::set_geometry(std::string&& value) {
  
  geometry_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hdmap.Light.geometry)
}
inline void Light::set_geometry(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geometry_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hdmap.Light.geometry)
}
inline void Light::set_geometry(const char* value, size_t size) {
  
  geometry_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hdmap.Light.geometry)
}
inline std::string* Light::_internal_mutable_geometry() {
  
  return geometry_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Light::release_geometry() {
  // @@protoc_insertion_point(field_release:hdmap.Light.geometry)
  
  return geometry_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Light::set_allocated_geometry(std::string* geometry) {
  if (geometry != nullptr) {
    
  } else {
    
  }
  geometry_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geometry);
  // @@protoc_insertion_point(field_set_allocated:hdmap.Light.geometry)
}

// int32 direction = 3;
inline void Light::clear_direction() {
  direction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Light::direction() const {
  // @@protoc_insertion_point(field_get:hdmap.Light.direction)
  return direction_;
}
inline void Light::set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:hdmap.Light.direction)
}

// -------------------------------------------------------------------

// TrafficLight

// int32 id = 1;
inline void TrafficLight::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLight::id() const {
  // @@protoc_insertion_point(field_get:hdmap.TrafficLight.id)
  return id_;
}
inline void TrafficLight::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:hdmap.TrafficLight.id)
}

// string geometry = 2;
inline void TrafficLight::clear_geometry() {
  geometry_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrafficLight::geometry() const {
  // @@protoc_insertion_point(field_get:hdmap.TrafficLight.geometry)
  return _internal_geometry();
}
inline void TrafficLight::set_geometry(const std::string& value) {
  _internal_set_geometry(value);
  // @@protoc_insertion_point(field_set:hdmap.TrafficLight.geometry)
}
inline std::string* TrafficLight::mutable_geometry() {
  // @@protoc_insertion_point(field_mutable:hdmap.TrafficLight.geometry)
  return _internal_mutable_geometry();
}
inline const std::string& TrafficLight::_internal_geometry() const {
  return geometry_.GetNoArena();
}
inline void TrafficLight::_internal_set_geometry(const std::string& value) {
  
  geometry_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrafficLight::set_geometry(std::string&& value) {
  
  geometry_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hdmap.TrafficLight.geometry)
}
inline void TrafficLight::set_geometry(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geometry_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hdmap.TrafficLight.geometry)
}
inline void TrafficLight::set_geometry(const char* value, size_t size) {
  
  geometry_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hdmap.TrafficLight.geometry)
}
inline std::string* TrafficLight::_internal_mutable_geometry() {
  
  return geometry_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrafficLight::release_geometry() {
  // @@protoc_insertion_point(field_release:hdmap.TrafficLight.geometry)
  
  return geometry_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficLight::set_allocated_geometry(std::string* geometry) {
  if (geometry != nullptr) {
    
  } else {
    
  }
  geometry_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geometry);
  // @@protoc_insertion_point(field_set_allocated:hdmap.TrafficLight.geometry)
}

// int32 motor_type = 3;
inline void TrafficLight::clear_motor_type() {
  motor_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLight::motor_type() const {
  // @@protoc_insertion_point(field_get:hdmap.TrafficLight.motor_type)
  return motor_type_;
}
inline void TrafficLight::set_motor_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  motor_type_ = value;
  // @@protoc_insertion_point(field_set:hdmap.TrafficLight.motor_type)
}

// repeated .hdmap.Light lights = 4;
inline int TrafficLight::lights_size() const {
  return lights_.size();
}
inline void TrafficLight::clear_lights() {
  lights_.Clear();
}
inline ::hdmap::Light* TrafficLight::mutable_lights(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap.TrafficLight.lights)
  return lights_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::Light >*
TrafficLight::mutable_lights() {
  // @@protoc_insertion_point(field_mutable_list:hdmap.TrafficLight.lights)
  return &lights_;
}
inline const ::hdmap::Light& TrafficLight::lights(int index) const {
  // @@protoc_insertion_point(field_get:hdmap.TrafficLight.lights)
  return lights_.Get(index);
}
inline ::hdmap::Light* TrafficLight::add_lights() {
  // @@protoc_insertion_point(field_add:hdmap.TrafficLight.lights)
  return lights_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::Light >&
TrafficLight::lights() const {
  // @@protoc_insertion_point(field_list:hdmap.TrafficLight.lights)
  return lights_;
}

// -------------------------------------------------------------------

// TrafficLightPerFrame

// int32 frame_id = 1;
inline void TrafficLightPerFrame::clear_frame_id() {
  frame_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLightPerFrame::frame_id() const {
  // @@protoc_insertion_point(field_get:hdmap.TrafficLightPerFrame.frame_id)
  return frame_id_;
}
inline void TrafficLightPerFrame::set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:hdmap.TrafficLightPerFrame.frame_id)
}

// repeated .hdmap.TrafficLight traffic_lights = 2;
inline int TrafficLightPerFrame::traffic_lights_size() const {
  return traffic_lights_.size();
}
inline void TrafficLightPerFrame::clear_traffic_lights() {
  traffic_lights_.Clear();
}
inline ::hdmap::TrafficLight* TrafficLightPerFrame::mutable_traffic_lights(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap.TrafficLightPerFrame.traffic_lights)
  return traffic_lights_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::TrafficLight >*
TrafficLightPerFrame::mutable_traffic_lights() {
  // @@protoc_insertion_point(field_mutable_list:hdmap.TrafficLightPerFrame.traffic_lights)
  return &traffic_lights_;
}
inline const ::hdmap::TrafficLight& TrafficLightPerFrame::traffic_lights(int index) const {
  // @@protoc_insertion_point(field_get:hdmap.TrafficLightPerFrame.traffic_lights)
  return traffic_lights_.Get(index);
}
inline ::hdmap::TrafficLight* TrafficLightPerFrame::add_traffic_lights() {
  // @@protoc_insertion_point(field_add:hdmap.TrafficLightPerFrame.traffic_lights)
  return traffic_lights_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::TrafficLight >&
TrafficLightPerFrame::traffic_lights() const {
  // @@protoc_insertion_point(field_list:hdmap.TrafficLightPerFrame.traffic_lights)
  return traffic_lights_;
}

// -------------------------------------------------------------------

// TrafficLightPerCapture

// string scene_id = 1;
inline void TrafficLightPerCapture::clear_scene_id() {
  scene_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrafficLightPerCapture::scene_id() const {
  // @@protoc_insertion_point(field_get:hdmap.TrafficLightPerCapture.scene_id)
  return _internal_scene_id();
}
inline void TrafficLightPerCapture::set_scene_id(const std::string& value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:hdmap.TrafficLightPerCapture.scene_id)
}
inline std::string* TrafficLightPerCapture::mutable_scene_id() {
  // @@protoc_insertion_point(field_mutable:hdmap.TrafficLightPerCapture.scene_id)
  return _internal_mutable_scene_id();
}
inline const std::string& TrafficLightPerCapture::_internal_scene_id() const {
  return scene_id_.GetNoArena();
}
inline void TrafficLightPerCapture::_internal_set_scene_id(const std::string& value) {
  
  scene_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrafficLightPerCapture::set_scene_id(std::string&& value) {
  
  scene_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hdmap.TrafficLightPerCapture.scene_id)
}
inline void TrafficLightPerCapture::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scene_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hdmap.TrafficLightPerCapture.scene_id)
}
inline void TrafficLightPerCapture::set_scene_id(const char* value, size_t size) {
  
  scene_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hdmap.TrafficLightPerCapture.scene_id)
}
inline std::string* TrafficLightPerCapture::_internal_mutable_scene_id() {
  
  return scene_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrafficLightPerCapture::release_scene_id() {
  // @@protoc_insertion_point(field_release:hdmap.TrafficLightPerCapture.scene_id)
  
  return scene_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficLightPerCapture::set_allocated_scene_id(std::string* scene_id) {
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene_id);
  // @@protoc_insertion_point(field_set_allocated:hdmap.TrafficLightPerCapture.scene_id)
}

// repeated .hdmap.TrafficLightPerFrame traffic_light_frames = 2;
inline int TrafficLightPerCapture::traffic_light_frames_size() const {
  return traffic_light_frames_.size();
}
inline void TrafficLightPerCapture::clear_traffic_light_frames() {
  traffic_light_frames_.Clear();
}
inline ::hdmap::TrafficLightPerFrame* TrafficLightPerCapture::mutable_traffic_light_frames(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap.TrafficLightPerCapture.traffic_light_frames)
  return traffic_light_frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::TrafficLightPerFrame >*
TrafficLightPerCapture::mutable_traffic_light_frames() {
  // @@protoc_insertion_point(field_mutable_list:hdmap.TrafficLightPerCapture.traffic_light_frames)
  return &traffic_light_frames_;
}
inline const ::hdmap::TrafficLightPerFrame& TrafficLightPerCapture::traffic_light_frames(int index) const {
  // @@protoc_insertion_point(field_get:hdmap.TrafficLightPerCapture.traffic_light_frames)
  return traffic_light_frames_.Get(index);
}
inline ::hdmap::TrafficLightPerFrame* TrafficLightPerCapture::add_traffic_light_frames() {
  // @@protoc_insertion_point(field_add:hdmap.TrafficLightPerCapture.traffic_light_frames)
  return traffic_light_frames_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hdmap::TrafficLightPerFrame >&
TrafficLightPerCapture::traffic_light_frames() const {
  // @@protoc_insertion_point(field_list:hdmap.TrafficLightPerCapture.traffic_light_frames)
  return traffic_light_frames_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TrafficLight_2eproto
