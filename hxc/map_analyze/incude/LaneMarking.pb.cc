// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LaneMarking.proto

#include "LaneMarking.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_LaneMarking_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneMarking_LaneMarking_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LaneMarking_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneMarkingPerFrame_LaneMarking_2eproto;
namespace hdmap {
class LaneMarkingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneMarking> _instance;
} _LaneMarking_default_instance_;
class LaneMarkingPerFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneMarkingPerFrame> _instance;
} _LaneMarkingPerFrame_default_instance_;
class LaneMarkingPerCaptureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneMarkingPerCapture> _instance;
} _LaneMarkingPerCapture_default_instance_;
}  // namespace hdmap
static void InitDefaultsscc_info_LaneMarking_LaneMarking_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hdmap::_LaneMarking_default_instance_;
    new (ptr) ::hdmap::LaneMarking();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hdmap::LaneMarking::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneMarking_LaneMarking_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LaneMarking_LaneMarking_2eproto}, {}};

static void InitDefaultsscc_info_LaneMarkingPerCapture_LaneMarking_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hdmap::_LaneMarkingPerCapture_default_instance_;
    new (ptr) ::hdmap::LaneMarkingPerCapture();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hdmap::LaneMarkingPerCapture::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneMarkingPerCapture_LaneMarking_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LaneMarkingPerCapture_LaneMarking_2eproto}, {
      &scc_info_LaneMarkingPerFrame_LaneMarking_2eproto.base,}};

static void InitDefaultsscc_info_LaneMarkingPerFrame_LaneMarking_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hdmap::_LaneMarkingPerFrame_default_instance_;
    new (ptr) ::hdmap::LaneMarkingPerFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hdmap::LaneMarkingPerFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneMarkingPerFrame_LaneMarking_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LaneMarkingPerFrame_LaneMarking_2eproto}, {
      &scc_info_LaneMarking_LaneMarking_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_LaneMarking_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_LaneMarking_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_LaneMarking_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_LaneMarking_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hdmap::LaneMarking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hdmap::LaneMarking, id_),
  PROTOBUF_FIELD_OFFSET(::hdmap::LaneMarking, geometry_),
  PROTOBUF_FIELD_OFFSET(::hdmap::LaneMarking, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hdmap::LaneMarkingPerFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hdmap::LaneMarkingPerFrame, frame_id_),
  PROTOBUF_FIELD_OFFSET(::hdmap::LaneMarkingPerFrame, lane_markings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hdmap::LaneMarkingPerCapture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hdmap::LaneMarkingPerCapture, scene_id_),
  PROTOBUF_FIELD_OFFSET(::hdmap::LaneMarkingPerCapture, lane_marking_frames_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::hdmap::LaneMarking)},
  { 8, -1, sizeof(::hdmap::LaneMarkingPerFrame)},
  { 15, -1, sizeof(::hdmap::LaneMarkingPerCapture)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hdmap::_LaneMarking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hdmap::_LaneMarkingPerFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hdmap::_LaneMarkingPerCapture_default_instance_),
};

const char descriptor_table_protodef_LaneMarking_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021LaneMarking.proto\022\005hdmap\"9\n\013LaneMarkin"
  "g\022\n\n\002id\030\001 \001(\005\022\020\n\010geometry\030\002 \001(\t\022\014\n\004type\030"
  "\003 \001(\005\"R\n\023LaneMarkingPerFrame\022\020\n\010frame_id"
  "\030\001 \001(\005\022)\n\rlane_markings\030\002 \003(\0132\022.hdmap.La"
  "neMarking\"b\n\025LaneMarkingPerCapture\022\020\n\010sc"
  "ene_id\030\001 \001(\t\0227\n\023lane_marking_frames\030\002 \003("
  "\0132\032.hdmap.LaneMarkingPerFrameb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_LaneMarking_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_LaneMarking_2eproto_sccs[3] = {
  &scc_info_LaneMarking_LaneMarking_2eproto.base,
  &scc_info_LaneMarkingPerCapture_LaneMarking_2eproto.base,
  &scc_info_LaneMarkingPerFrame_LaneMarking_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_LaneMarking_2eproto_once;
static bool descriptor_table_LaneMarking_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LaneMarking_2eproto = {
  &descriptor_table_LaneMarking_2eproto_initialized, descriptor_table_protodef_LaneMarking_2eproto, "LaneMarking.proto", 277,
  &descriptor_table_LaneMarking_2eproto_once, descriptor_table_LaneMarking_2eproto_sccs, descriptor_table_LaneMarking_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_LaneMarking_2eproto::offsets,
  file_level_metadata_LaneMarking_2eproto, 3, file_level_enum_descriptors_LaneMarking_2eproto, file_level_service_descriptors_LaneMarking_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_LaneMarking_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_LaneMarking_2eproto), true);
namespace hdmap {

// ===================================================================

void LaneMarking::InitAsDefaultInstance() {
}
class LaneMarking::_Internal {
 public:
};

LaneMarking::LaneMarking()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap.LaneMarking)
}
LaneMarking::LaneMarking(const LaneMarking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  geometry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.geometry().empty()) {
    geometry_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.geometry_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:hdmap.LaneMarking)
}

void LaneMarking::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneMarking_LaneMarking_2eproto.base);
  geometry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

LaneMarking::~LaneMarking() {
  // @@protoc_insertion_point(destructor:hdmap.LaneMarking)
  SharedDtor();
}

void LaneMarking::SharedDtor() {
  geometry_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LaneMarking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneMarking& LaneMarking::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneMarking_LaneMarking_2eproto.base);
  return *internal_default_instance();
}


void LaneMarking::Clear() {
// @@protoc_insertion_point(message_clear_start:hdmap.LaneMarking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geometry_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaneMarking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string geometry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_geometry(), ptr, ctx, "hdmap.LaneMarking.geometry");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaneMarking::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap.LaneMarking)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string geometry = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_geometry()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->geometry().data(), static_cast<int>(this->geometry().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "hdmap.LaneMarking.geometry"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap.LaneMarking)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap.LaneMarking)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaneMarking::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap.LaneMarking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string geometry = 2;
  if (this->geometry().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->geometry().data(), static_cast<int>(this->geometry().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hdmap.LaneMarking.geometry");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->geometry(), output);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap.LaneMarking)
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneMarking::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap.LaneMarking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string geometry = 2;
  if (this->geometry().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->geometry().data(), static_cast<int>(this->geometry().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hdmap.LaneMarking.geometry");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->geometry(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap.LaneMarking)
  return target;
}

size_t LaneMarking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hdmap.LaneMarking)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string geometry = 2;
  if (this->geometry().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->geometry());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneMarking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hdmap.LaneMarking)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneMarking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneMarking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hdmap.LaneMarking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hdmap.LaneMarking)
    MergeFrom(*source);
  }
}

void LaneMarking::MergeFrom(const LaneMarking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hdmap.LaneMarking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.geometry().size() > 0) {

    geometry_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.geometry_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void LaneMarking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hdmap.LaneMarking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneMarking::CopyFrom(const LaneMarking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hdmap.LaneMarking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMarking::IsInitialized() const {
  return true;
}

void LaneMarking::InternalSwap(LaneMarking* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  geometry_.Swap(&other->geometry_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneMarking::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaneMarkingPerFrame::InitAsDefaultInstance() {
}
class LaneMarkingPerFrame::_Internal {
 public:
};

LaneMarkingPerFrame::LaneMarkingPerFrame()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap.LaneMarkingPerFrame)
}
LaneMarkingPerFrame::LaneMarkingPerFrame(const LaneMarkingPerFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      lane_markings_(from.lane_markings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_id_ = from.frame_id_;
  // @@protoc_insertion_point(copy_constructor:hdmap.LaneMarkingPerFrame)
}

void LaneMarkingPerFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneMarkingPerFrame_LaneMarking_2eproto.base);
  frame_id_ = 0;
}

LaneMarkingPerFrame::~LaneMarkingPerFrame() {
  // @@protoc_insertion_point(destructor:hdmap.LaneMarkingPerFrame)
  SharedDtor();
}

void LaneMarkingPerFrame::SharedDtor() {
}

void LaneMarkingPerFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneMarkingPerFrame& LaneMarkingPerFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneMarkingPerFrame_LaneMarking_2eproto.base);
  return *internal_default_instance();
}


void LaneMarkingPerFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:hdmap.LaneMarkingPerFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_markings_.Clear();
  frame_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaneMarkingPerFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hdmap.LaneMarking lane_markings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_lane_markings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaneMarkingPerFrame::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap.LaneMarkingPerFrame)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 frame_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hdmap.LaneMarking lane_markings = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_lane_markings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap.LaneMarkingPerFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap.LaneMarkingPerFrame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaneMarkingPerFrame::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap.LaneMarkingPerFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->frame_id(), output);
  }

  // repeated .hdmap.LaneMarking lane_markings = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_markings_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->lane_markings(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap.LaneMarkingPerFrame)
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneMarkingPerFrame::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap.LaneMarkingPerFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->frame_id(), target);
  }

  // repeated .hdmap.LaneMarking lane_markings = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_markings_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->lane_markings(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap.LaneMarkingPerFrame)
  return target;
}

size_t LaneMarkingPerFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hdmap.LaneMarkingPerFrame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hdmap.LaneMarking lane_markings = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_markings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->lane_markings(static_cast<int>(i)));
    }
  }

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->frame_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneMarkingPerFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hdmap.LaneMarkingPerFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneMarkingPerFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneMarkingPerFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hdmap.LaneMarkingPerFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hdmap.LaneMarkingPerFrame)
    MergeFrom(*source);
  }
}

void LaneMarkingPerFrame::MergeFrom(const LaneMarkingPerFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hdmap.LaneMarkingPerFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_markings_.MergeFrom(from.lane_markings_);
  if (from.frame_id() != 0) {
    set_frame_id(from.frame_id());
  }
}

void LaneMarkingPerFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hdmap.LaneMarkingPerFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneMarkingPerFrame::CopyFrom(const LaneMarkingPerFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hdmap.LaneMarkingPerFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMarkingPerFrame::IsInitialized() const {
  return true;
}

void LaneMarkingPerFrame::InternalSwap(LaneMarkingPerFrame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&lane_markings_)->InternalSwap(CastToBase(&other->lane_markings_));
  swap(frame_id_, other->frame_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneMarkingPerFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaneMarkingPerCapture::InitAsDefaultInstance() {
}
class LaneMarkingPerCapture::_Internal {
 public:
};

LaneMarkingPerCapture::LaneMarkingPerCapture()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap.LaneMarkingPerCapture)
}
LaneMarkingPerCapture::LaneMarkingPerCapture(const LaneMarkingPerCapture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      lane_marking_frames_(from.lane_marking_frames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scene_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.scene_id().empty()) {
    scene_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scene_id_);
  }
  // @@protoc_insertion_point(copy_constructor:hdmap.LaneMarkingPerCapture)
}

void LaneMarkingPerCapture::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneMarkingPerCapture_LaneMarking_2eproto.base);
  scene_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LaneMarkingPerCapture::~LaneMarkingPerCapture() {
  // @@protoc_insertion_point(destructor:hdmap.LaneMarkingPerCapture)
  SharedDtor();
}

void LaneMarkingPerCapture::SharedDtor() {
  scene_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LaneMarkingPerCapture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneMarkingPerCapture& LaneMarkingPerCapture::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneMarkingPerCapture_LaneMarking_2eproto.base);
  return *internal_default_instance();
}


void LaneMarkingPerCapture::Clear() {
// @@protoc_insertion_point(message_clear_start:hdmap.LaneMarkingPerCapture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_marking_frames_.Clear();
  scene_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaneMarkingPerCapture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_scene_id(), ptr, ctx, "hdmap.LaneMarkingPerCapture.scene_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hdmap.LaneMarkingPerFrame lane_marking_frames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_lane_marking_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaneMarkingPerCapture::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap.LaneMarkingPerCapture)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string scene_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_scene_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->scene_id().data(), static_cast<int>(this->scene_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "hdmap.LaneMarkingPerCapture.scene_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hdmap.LaneMarkingPerFrame lane_marking_frames = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_lane_marking_frames()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap.LaneMarkingPerCapture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap.LaneMarkingPerCapture)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaneMarkingPerCapture::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap.LaneMarkingPerCapture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string scene_id = 1;
  if (this->scene_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->scene_id().data(), static_cast<int>(this->scene_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hdmap.LaneMarkingPerCapture.scene_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->scene_id(), output);
  }

  // repeated .hdmap.LaneMarkingPerFrame lane_marking_frames = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_marking_frames_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->lane_marking_frames(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap.LaneMarkingPerCapture)
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneMarkingPerCapture::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap.LaneMarkingPerCapture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string scene_id = 1;
  if (this->scene_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->scene_id().data(), static_cast<int>(this->scene_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hdmap.LaneMarkingPerCapture.scene_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->scene_id(), target);
  }

  // repeated .hdmap.LaneMarkingPerFrame lane_marking_frames = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_marking_frames_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->lane_marking_frames(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap.LaneMarkingPerCapture)
  return target;
}

size_t LaneMarkingPerCapture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hdmap.LaneMarkingPerCapture)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hdmap.LaneMarkingPerFrame lane_marking_frames = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_marking_frames_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->lane_marking_frames(static_cast<int>(i)));
    }
  }

  // string scene_id = 1;
  if (this->scene_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->scene_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneMarkingPerCapture::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hdmap.LaneMarkingPerCapture)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneMarkingPerCapture* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneMarkingPerCapture>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hdmap.LaneMarkingPerCapture)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hdmap.LaneMarkingPerCapture)
    MergeFrom(*source);
  }
}

void LaneMarkingPerCapture::MergeFrom(const LaneMarkingPerCapture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hdmap.LaneMarkingPerCapture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_marking_frames_.MergeFrom(from.lane_marking_frames_);
  if (from.scene_id().size() > 0) {

    scene_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scene_id_);
  }
}

void LaneMarkingPerCapture::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hdmap.LaneMarkingPerCapture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneMarkingPerCapture::CopyFrom(const LaneMarkingPerCapture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hdmap.LaneMarkingPerCapture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMarkingPerCapture::IsInitialized() const {
  return true;
}

void LaneMarkingPerCapture::InternalSwap(LaneMarkingPerCapture* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&lane_marking_frames_)->InternalSwap(CastToBase(&other->lane_marking_frames_));
  scene_id_.Swap(&other->scene_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneMarkingPerCapture::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hdmap::LaneMarking* Arena::CreateMaybeMessage< ::hdmap::LaneMarking >(Arena* arena) {
  return Arena::CreateInternal< ::hdmap::LaneMarking >(arena);
}
template<> PROTOBUF_NOINLINE ::hdmap::LaneMarkingPerFrame* Arena::CreateMaybeMessage< ::hdmap::LaneMarkingPerFrame >(Arena* arena) {
  return Arena::CreateInternal< ::hdmap::LaneMarkingPerFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::hdmap::LaneMarkingPerCapture* Arena::CreateMaybeMessage< ::hdmap::LaneMarkingPerCapture >(Arena* arena) {
  return Arena::CreateInternal< ::hdmap::LaneMarkingPerCapture >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
