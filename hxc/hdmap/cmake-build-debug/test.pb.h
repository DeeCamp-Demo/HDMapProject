// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
namespace test {
class ArmorSize;
class ArmorSizeDefaultTypeInternal;
extern ArmorSizeDefaultTypeInternal _ArmorSize_default_instance_;
class ConstraintSetConfig;
class ConstraintSetConfigDefaultTypeInternal;
extern ConstraintSetConfigDefaultTypeInternal _ConstraintSetConfig_default_instance_;
}  // namespace test
PROTOBUF_NAMESPACE_OPEN
template<> ::test::ArmorSize* Arena::CreateMaybeMessage<::test::ArmorSize>(Arena*);
template<> ::test::ConstraintSetConfig* Arena::CreateMaybeMessage<::test::ConstraintSetConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace test {

// ===================================================================

class ArmorSize :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.ArmorSize) */ {
 public:
  ArmorSize();
  virtual ~ArmorSize();

  ArmorSize(const ArmorSize& from);
  ArmorSize(ArmorSize&& from) noexcept
    : ArmorSize() {
    *this = ::std::move(from);
  }

  inline ArmorSize& operator=(const ArmorSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmorSize& operator=(ArmorSize&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArmorSize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArmorSize* internal_default_instance() {
    return reinterpret_cast<const ArmorSize*>(
               &_ArmorSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ArmorSize& a, ArmorSize& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmorSize* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArmorSize* New() const final {
    return CreateMaybeMessage<ArmorSize>(nullptr);
  }

  ArmorSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArmorSize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArmorSize& from);
  void MergeFrom(const ArmorSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmorSize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.ArmorSize";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // required float width = 1;
  bool has_width() const;
  void clear_width();
  float width() const;
  void set_width(float value);

  // required float height = 2;
  bool has_height() const;
  void clear_height();
  float height() const;
  void set_height(float value);

  // @@protoc_insertion_point(class_scope:test.ArmorSize)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float width_;
  float height_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class ConstraintSetConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.ConstraintSetConfig) */ {
 public:
  ConstraintSetConfig();
  virtual ~ConstraintSetConfig();

  ConstraintSetConfig(const ConstraintSetConfig& from);
  ConstraintSetConfig(ConstraintSetConfig&& from) noexcept
    : ConstraintSetConfig() {
    *this = ::std::move(from);
  }

  inline ConstraintSetConfig& operator=(const ConstraintSetConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConstraintSetConfig& operator=(ConstraintSetConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConstraintSetConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConstraintSetConfig* internal_default_instance() {
    return reinterpret_cast<const ConstraintSetConfig*>(
               &_ConstraintSetConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConstraintSetConfig& a, ConstraintSetConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ConstraintSetConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConstraintSetConfig* New() const final {
    return CreateMaybeMessage<ConstraintSetConfig>(nullptr);
  }

  ConstraintSetConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConstraintSetConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConstraintSetConfig& from);
  void MergeFrom(const ConstraintSetConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConstraintSetConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.ConstraintSetConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArmorSizeFieldNumber = 3,
    kUsingHsvFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // required .test.ArmorSize armor_size = 3;
  bool has_armor_size() const;
  void clear_armor_size();
  const ::test::ArmorSize& armor_size() const;
  ::test::ArmorSize* release_armor_size();
  ::test::ArmorSize* mutable_armor_size();
  void set_allocated_armor_size(::test::ArmorSize* armor_size);

  // required bool using_hsv = 1;
  bool has_using_hsv() const;
  void clear_using_hsv();
  bool using_hsv() const;
  void set_using_hsv(bool value);

  // required float num = 2;
  bool has_num() const;
  void clear_num();
  float num() const;
  void set_num(float value);

  // @@protoc_insertion_point(class_scope:test.ConstraintSetConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::test::ArmorSize* armor_size_;
  bool using_hsv_;
  float num_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ArmorSize

// required float width = 1;
inline bool ArmorSize::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArmorSize::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ArmorSize::width() const {
  // @@protoc_insertion_point(field_get:test.ArmorSize.width)
  return width_;
}
inline void ArmorSize::set_width(float value) {
  _has_bits_[0] |= 0x00000001u;
  width_ = value;
  // @@protoc_insertion_point(field_set:test.ArmorSize.width)
}

// required float height = 2;
inline bool ArmorSize::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArmorSize::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ArmorSize::height() const {
  // @@protoc_insertion_point(field_get:test.ArmorSize.height)
  return height_;
}
inline void ArmorSize::set_height(float value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
  // @@protoc_insertion_point(field_set:test.ArmorSize.height)
}

// -------------------------------------------------------------------

// ConstraintSetConfig

// required bool using_hsv = 1;
inline bool ConstraintSetConfig::has_using_hsv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConstraintSetConfig::clear_using_hsv() {
  using_hsv_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ConstraintSetConfig::using_hsv() const {
  // @@protoc_insertion_point(field_get:test.ConstraintSetConfig.using_hsv)
  return using_hsv_;
}
inline void ConstraintSetConfig::set_using_hsv(bool value) {
  _has_bits_[0] |= 0x00000002u;
  using_hsv_ = value;
  // @@protoc_insertion_point(field_set:test.ConstraintSetConfig.using_hsv)
}

// required float num = 2;
inline bool ConstraintSetConfig::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConstraintSetConfig::clear_num() {
  num_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ConstraintSetConfig::num() const {
  // @@protoc_insertion_point(field_get:test.ConstraintSetConfig.num)
  return num_;
}
inline void ConstraintSetConfig::set_num(float value) {
  _has_bits_[0] |= 0x00000004u;
  num_ = value;
  // @@protoc_insertion_point(field_set:test.ConstraintSetConfig.num)
}

// required .test.ArmorSize armor_size = 3;
inline bool ConstraintSetConfig::has_armor_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConstraintSetConfig::clear_armor_size() {
  if (armor_size_ != nullptr) armor_size_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::test::ArmorSize& ConstraintSetConfig::armor_size() const {
  const ::test::ArmorSize* p = armor_size_;
  // @@protoc_insertion_point(field_get:test.ConstraintSetConfig.armor_size)
  return p != nullptr ? *p : *reinterpret_cast<const ::test::ArmorSize*>(
      &::test::_ArmorSize_default_instance_);
}
inline ::test::ArmorSize* ConstraintSetConfig::release_armor_size() {
  // @@protoc_insertion_point(field_release:test.ConstraintSetConfig.armor_size)
  _has_bits_[0] &= ~0x00000001u;
  ::test::ArmorSize* temp = armor_size_;
  armor_size_ = nullptr;
  return temp;
}
inline ::test::ArmorSize* ConstraintSetConfig::mutable_armor_size() {
  _has_bits_[0] |= 0x00000001u;
  if (armor_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::test::ArmorSize>(GetArenaNoVirtual());
    armor_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:test.ConstraintSetConfig.armor_size)
  return armor_size_;
}
inline void ConstraintSetConfig::set_allocated_armor_size(::test::ArmorSize* armor_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete armor_size_;
  }
  if (armor_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      armor_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, armor_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  armor_size_ = armor_size;
  // @@protoc_insertion_point(field_set_allocated:test.ConstraintSetConfig.armor_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
